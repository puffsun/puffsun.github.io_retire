<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | George's dream port]]></title>
  <link href="http://puffsun.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://puffsun.github.io/"/>
  <updated>2014-01-23T18:45:42+08:00</updated>
  <id>http://puffsun.github.io/</id>
  <author>
    <name><![CDATA[George Sun]]></name>
    <email><![CDATA[sunwinner3@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Design Patterns]]></title>
    <link href="http://puffsun.github.io/blog/2014/01/23/ruby-design-patterns/"/>
    <updated>2014-01-23T13:27:14+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/01/23/ruby-design-patterns</id>
    <content type="html"><![CDATA[<p>I just finished reading the great book <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Design Patterns in Ruby</a>. Actually just like me, most of developers know Design Patterns well, what I want to learn from the book is Design Patterns in Ruby style, there is a saying: <em>Just because you have duck-typing doesn&rsquo;t mean you can ignore common OO idioms!</em></p>

<p>In this blog post, I&rsquo;m going to show you how to implement common design patterns in Ruby, without further ado, let&rsquo;s go!</p>

<h4>Factory</h4>

<p>The classic implementation in the book <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1390451541&amp;sr=1-1&amp;keywords=design+patterns">Design Patterns: Elements of Reusable Object-Oriented Software</a> is inheriance-based, this kind of style is hard to find in Ruby code, Ruby programmers are more prefer to more dynamic version, like this:</p>

<p>```ruby
class Product
  #..
end</p>

<p>class Factory
  attr_accessor :product
  def produce</p>

<pre><code>@product.new
</code></pre>

<p>  end
end</p>

<p>fac = Factory.new
fac.product = Product
fac.produce
```</p>

<!--more-->


<h4>Builder</h4>

<p>Ruby&rsquo;s build method is more dynamic, like the code shown:</p>

<p>```ruby
class Director
  def build_with builder</p>

<pre><code>acc = ''
[:header, :body, :footer].each do |m|
  acc += builder.__send__ m if builder.respond_to? m
end
acc
</code></pre>

<p>  end
end</p>

<p>class HTMLBuilder
  def header; &lsquo;<html><title>html builder</title>&rsquo;;end
  def body;   &lsquo;<body>html builder</body>&rsquo;        ;end
  def footer; &lsquo;</html>&rsquo;                          ;end
end</p>

<p>class XMLBuilder
  def header; &lsquo;&lt;?xml version=&ldquo;1.0&rdquo; charset=&ldquo;utf-8&rdquo;>&rsquo;;end
  def body;   &lsquo;<root>xml builder</root>&rsquo;            ;end
end</p>

<p>d = Director.new
puts(d.build_with HTMLBuilder.new)
puts(d.build_with XMLBuilder.new)</p>

<p>```
The fun part is that above code will check the method signature, if the object we want to build don&rsquo;t need specify part, we could leave the method unimplemented that&rsquo;s ok to Ruby.</p>

<h4>Adapter</h4>

<p>```ruby
class Adaptee
  def talk; puts &lsquo;Adaptee&rsquo;;end
end
class Adapter &lt; Adaptee
  alias talkee talk
  def talk</p>

<pre><code>puts 'before Adaptee'
talkee
puts 'after Adaptee'
</code></pre>

<p>  end
end
Adapter.new.talk
```</p>

<h4>Composite</h4>

<p>I&rsquo;m totally agree with the point that the Composite pattern is built into Ruby with the include keyword. As you know, with composite pattern, there&rsquo;re two concepts: Whole and Parts. In Ruby, you can imagine the the whole is the Mixiner, while the part is the Mixinee.</p>

<h4>Decorator</h4>

<p>This is another demonstration of Ruby&rsquo;s power, it built with a lot of proved best practice. In Ruby, you can implement Decorator pattern by extending modules, like:
<code>ruby
module Colorful
  attr_acessor :color
end
class Widget
end
w = Widget.new
w.color = 'blue' #NoMethod error
w.extend Colorful
w.color = 'blue'
puts w.color
</code></p>

<h4>Proxy</h4>

<p>Just like adapter, you can implement Proxy pattern by delegating its interface to another instance. But keep in mind the difference of Proxy and Adapter, with Proxy, you should not change interface, you can use Proxy pattern for caching purpose or for security reasons, just keep interface the same to its subject; but with Adapter pattern, you can transform the interface of the inner object.</p>

<h4>Command</h4>

<p>In Ruby, you can implement Command pattern leverage code blocks:
```ruby
class Command
  def initialize</p>

<pre><code>@executors = []
</code></pre>

<p>  end</p>

<p>  def add_executor &amp;block</p>

<pre><code>@executors &lt;&lt; block
</code></pre>

<p>  end</p>

<p>  def execute</p>

<pre><code>@executors.each {|x| x.call }
</code></pre>

<p>  end
end</p>

<p>c = Command.new
c.add_executor{ puts &lsquo;executor 1&rsquo; }
c.add_executor{ puts &lsquo;executor 2&rsquo; }
c.execute
```</p>

<h4>Template method</h4>

<p>Here is code snippet quoted from the book:
```ruby
require &lsquo;webrick&rsquo;
class HelloServer &lt; WEBrick::GenericServer
  def run(socket)</p>

<pre><code>socket.print('Hello TCP/IP world')
</code></pre>

<p>  end
end
```
It'a simple HTTP server implementation, WEBrick library complete most of heavy lift, like listening on a port, accepting new connections, cleaning up when a connection is finished etc.. What we do is to provide HTTP response content, that&rsquo;s the beauty of Template method.</p>

<h4>Singleton</h4>

<p>In Ruby, Singleton is as simple as:
```ruby
module SingletonClass
  class &lt;&lt; self</p>

<pre><code># methods
</code></pre>

<p>  end
end
<code>
or you can leverage the built-in standard library:
</code>ruby
require &lsquo;singleton&rsquo;</p>

<p>class SingletonLogger &lt; SimpleLogger
  include Singleton
  # Logger implementation details.
end
```</p>

<p>There&rsquo;re still some patterns that I didn&rsquo;t cover, but perhaps you have got the idea that Ruby has many design patterns built into it in the first place. As a saying that &ldquo;design patterns are usually a flaw in the language/framework&rdquo;, although I doubted that argue, apparently Ruby is not in that place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1 New Features]]></title>
    <link href="http://puffsun.github.io/blog/2014/01/23/ruby-21-new-features/"/>
    <updated>2014-01-23T11:22:29+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/01/23/ruby-21-new-features</id>
    <content type="html"><![CDATA[<p>Ruby 2.1 has been released several days before. It brought a number of optimisations as well as smaller and useful features. In this article, I will go through several very welcoming features, without further ado, let&rsquo;s move on to the world of Ruby 2.1.</p>

<h3>Installing Ruby 2.1</h3>

<p>If you&rsquo;re on rvm(run <code>rvm get head</code> to get 2.1.0):</p>

<p><code>bash
$ rvm get head
$ rvm install ruby-2.1.0
$ rvm use ruby-2.1.0
</code>
Or if you like me, using <code>rbenv</code>:</p>

<p><code>bash
$ rbenv install 2.1.0
$ rbenv rehash
$ rbenv shell 2.1.0
</code>
To make sure you&rsquo;re using the newly installed Ruby, run:</p>

<p><code>bash
$ ruby -v
</code></p>

<!--more-->


<h3>New features that we&rsquo;ll talk about</h3>

<p>For complete release notes, go ahead to <a href="https://github.com/ruby/ruby/blob/v2_1_0/NEWS">https://github.com/ruby/ruby/blob/v2_1_0/NEWS</a>. Below is the list of features we&rsquo;ll talk about.</p>

<ol>
<li>Required Keyword Arguments</li>
<li>Rational and Complex Number Literals</li>
<li>def-expr Now Return Value</li>
<li>Array#to_h &amp; Enumerable#to_h</li>
<li>Exception#cause</li>
<li>Generational GC a.k.a RGenGC</li>
<li>Refinements</li>
<li>Object Allocation Tracing</li>
<li>Scrubbing Strings</li>
</ol>


<hr />

<h5>1. Required Keyword Arguments</h5>

<p>In previous Ruby 2.0 release, it introduced keyword arguments:</p>

<p><code>ruby
def foo(a: 10)
  puts "a: #{a}"
end
</code>
Unfortunately, the keyword always require a default value, which you avoid in Ruby 2.1 by using required keyword arguments:</p>

<p><code>ruby
def foo(a:)
  puts "a: #{a}"
end
</code></p>

<h5>2. Rational and Complex Number Literals</h5>

<p>Ruby 2.1 introduced the i <code>i</code> suffix to support Complex numbers, also the <code>r</code>suffix to support Rational numbers.</p>

<p><code>bash
irb(main):015:0&gt; 10+3i + Complex(5, 6i)
=&gt; (9+3i)
irb(main):014:0&gt; 10/3r
=&gt; (10/3)
</code></p>

<h5>3. def-expr Now Return Value</h5>

<p>In previous versions of Ruby, the return value of a method definition has always been nil, now in version 2.1, the return value of def expression is the Symbol of the method name.</p>

<p><code>bash
irb(main):016:0&gt; def foo
irb(main):017:1&gt; end
=&gt; :foo
</code>
The idea was to allow inlining of private/protected/public keywords and method definitions.</p>

<p>```ruby
module Foo
  def public_method
  end</p>

<p>  private def some_other_method
  end</p>

<p>  private def a_private_method
  end
end
```</p>

<h5>4. Array#to_h &amp; Enumerable#to_h</h5>

<p>Previously if you want convert an Array object to Hash object, you should do:</p>

<p><code>bash
irb(main):023:0&gt; my_array = [[:key1, "one"], [:key2, "two"], [:key3, "three"]]
=&gt; [[:key1, "one"], [:key2, "two"], [:key3, "three"]]
irb(main):024:0&gt; Hash[*my_array.flatten]
=&gt; {:key1=&gt;"one", :key2=&gt;"two", :key3=&gt;"three"}
</code>
It&rsquo;s a bit tedious, now with Ruby 2.1, you can do:</p>

<p><code>bash
my_array.to_h
=&gt; {:key1=&gt;"one", :key2=&gt;"two", :key3=&gt;"three"
</code>
It&rsquo;s much more simple.</p>

<h5>5. Exception#cause</h5>

<p>Sometimes when rescuing an exception in Ruby, it’s useful to handle the error scenario by raising another, different exception. The trouble with this technique is that it throws away all the information held by the original exception. This makes debugging harder, as there’s no stack trace to follow back to the root cause of the failure.</p>

<p>```ruby
begin
  begin</p>

<pre><code>raise "Error A"
</code></pre>

<p>  rescue => error</p>

<pre><code>raise "Error B"
</code></pre>

<p>  end
rescue => error
  puts &ldquo;Current failure: #{error.inspect}&rdquo;
  puts &ldquo;Original failure:  #{error.cause.inspect}&rdquo;
end</p>

<h1>>> Current failure: #&lt;RuntimeError: Error B></h1>

<h1>>> Original failure:  #&lt;RuntimeError: Error A></h1>

<p>```
For detailed explanation, go ahead to <a href="http://devblog.avdi.org/2013/12/25/exception-causes-in-ruby-2-1/">http://devblog.avdi.org/2013/12/25/exception-causes-in-ruby-2-1/</a>.</p>

<h5>6. Generational GC a.k.a RGenGC</h5>

<p>Now almost every programmer knows GC, thanks to Java. In more traditional programming languages, like C/C++, you must manually free resources when you finish using them, this make the program more error prone, also put a huge burden onto programmer.</p>

<p>RGenGC is a new garbage collector known as a <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Generational_GC_.28ephemeral_GC.29">generational garbage collector</a>, sometimes referred to as an ephemeral garbage collector. This design of garbage collector leverages the fact that most objects collected by the garbage collector were the objects most recently created. In other words, most objects being collected by the garbage collector were temporary objects, used for a short period in a single method and discarded. Generational garbage collectors collect these objects more effectively, putting less strain on the GC when it searches through the older objects to find unreferenced objects.</p>

<p>Prior to Ruby 2.1, Ruby’s garbage collector was running a conservative stop-the-world mark and sweep algorithm. In Ruby 2.1, we are still using the mark and sweep algorithm to garbage collect the young/old generations. However, because we have lesser objects to mark the marking time decreases, which leads to improved collector performance.</p>

<p>There are caveats, however. In order to preserve compatibility with C extensions, the Ruby core team could not implement a “full” generational garbage collection algorithm. In particular, they could not implement the <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Moving_vs._non-moving">moving garbage collection algorithm</a> – hence the “restricted”.</p>

<p>That said, it is very encouraging to see the Ruby core team taking garbage collection performance very seriously. For more details, do check out <a href="http://confreaks.com/videos/2866-rubyconf2013-object-management-on-ruby-2-1">this</a> excellent presentation by Koichi Sasada.</p>

<h5>7. Refinements</h5>

<p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>Refinements are no longer experimental in Ruby 2.1. If you are new to refinements, it helps to compare it to monkey patching. In Ruby, all classes are open. This means that we can happily add methods to an existing class.</p>

<p>To appreciate the havoc this can cause, let’s redefine String#count</p>

<p>```ruby
class String
  def count</p>

<pre><code>Float::INFINITY
</code></pre>

<p>  end
end
```
If you were to paste the above into irb, every string returns Infinity when count-ed:</p>

<p><code>bash
irb(main):001:0&gt; "I &lt;3 Monkey Patching".count
=&gt; Infinity
</code>
Refinements provide an alternate way to scope our modifications. Let’s make something slightly more useful:</p>

<p>```ruby
module Permalinker
  refine String do</p>

<pre><code>def permalinkify
  downcase.split.join("-")
end
</code></pre>

<p>  end
end</p>

<p>class Post
  using Permalinker</p>

<p>  def initialize(title)</p>

<pre><code>@title = title
</code></pre>

<p>  end</p>

<p>  def permalink</p>

<pre><code>@title.permalinkify
</code></pre>

<p>  end
end
```
First, we define a module, Permalinker that refines the String class with a new method. This method implements a cutting edge permalink algorithm.</p>

<p>In order to use our refinement, we simply add using Permalinker into our example Post class. After that, we could treat as if the String class has the permalinkify method.</p>

<p>Let’s see this in action:</p>

<p><code>bash
irb(main):002:0&gt; post = Post.new("Refinements are pretty awesome")
irb(main):002:0&gt; post.permalink
=&gt; "refinements-are-pretty-awesome"
</code>
To prove that String#permalinkify only exists within the scope of the Post class, let’s try using that method elsewhere and watch the code blow up:</p>

<p><code>``bash
irb(main):023:0&gt; "Refinements are not globally scoped".permalinkify
NoMethodError: undefined method</code>permalinkify' for &ldquo;Refinements are not globally scoped&rdquo;:String</p>

<pre><code>    from (irb):23
    from /usr/local/var/rbenv/versions/2.1.0/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<h5>8. Object Allocation Tracing</h5>

<p>If you have a bloated Ruby application, it is usually a non-trivial task to pinpoint the exact source of the problem. MRI Ruby still doesn’t have profiling tools that can rival, for example, the <a href="https://github.com/jruby/jruby/wiki/Profiling-Object-Allocations">JRuby profiler</a>.</p>

<p>Fortunately, work has begun to provide object allocation tracing to MRI Ruby.</p>

<p>Here’s an example:</p>

<p>```ruby
require &lsquo;objspace&rsquo;</p>

<p>class Post
  def initialize(title)</p>

<pre><code>@title = title
</code></pre>

<p>  end</p>

<p>  def tags</p>

<pre><code>%w(ruby programming code).map do |tag|
  tag.upcase
end
</code></pre>

<p>  end
end</p>

<p>ObjectSpace.trace_object_allocations_start
a = Post.new(&ldquo;title&rdquo;)
b = a.tags
ObjectSpace.trace_object_allocations_stop</p>

<p>puts ObjectSpace.allocation_sourcefile(a) # post.rb
puts ObjectSpace.allocation_sourceline(a) # 16
puts ObjectSpace.allocation_class_path(a) # Class
puts ObjectSpace.allocation_method_id(a)  # new</p>

<p>puts ObjectSpace.allocation_sourcefile(b) # post.rb
puts ObjectSpace.allocation_sourceline(b) # 9
puts ObjectSpace.allocation_class_path(b) # Array
puts ObjectSpace.allocation_method_id(b)  # map
```
Although knowing that we can obtain this information is great, it is not immediately obvious how this could be useful to you, the developer.</p>

<p>Enter the allocation_stats gem written by Sam Rawlins.</p>

<p>Let’s install it:</p>

<p><code>bash
$ gem install allocation_stats
Fetching: allocation_stats-0.1.2.gem (100%)
Successfully installed allocation_stats-0.1.2
Parsing documentation for allocation_stats-0.1.2
Installing ri documentation for allocation_stats-0.1.2
Done installing documentation for allocation_stats after 0 seconds
1 gem installed
</code>
Here’s the same example as before, except that we are using allocation_stats this time:</p>

<p>```ruby
require &lsquo;allocation_stats&rsquo;</p>

<p>class Post
  def initialize(title)</p>

<pre><code>@title = title
</code></pre>

<p>  end</p>

<p>  def tags</p>

<pre><code>%w(ruby programming code).map do |tag|
  tag.upcase
end
</code></pre>

<p>  end
end</p>

<p>stats = AllocationStats.trace do
  post = Post.new(&ldquo;title&rdquo;)
  post.tags
end</p>

<p>puts stats.allocations(alias_paths: true).to_text
```
Running this produces a nicely formatted table:</p>

<p>```bash
sourcefile  sourceline  class_path  method_id  memsize  class</p>

<hr />

<p>post.rb             10  String      upcase           0  String
post.rb             10  String      upcase           0  String
post.rb             10  String      upcase           0  String
post.rb              9  Array       map              0  Array
post.rb              9  Post        tags             0  Array
post.rb              9  Post        tags             0  String
post.rb              9  Post        tags             0  String
post.rb              9  Post        tags             0  String
post.rb             17  Class       new              0  Post
post.rb             17                               0  String
```
Sam gave a wonderful presentation that looks into more details of the allocation_stats gem.
(This section is quoted from <a href="http://www.sitepoint.com/look-ruby-2-1/">http://www.sitepoint.com/look-ruby-2-1/</a>)</p>

<h5>9. Strings</h5>

<p>String is important to every programming language, Ruby is no excuse, you cannot avoid them in almost every real world program. With the release of Ruby 2.1, there are a few of changes you can use to your advantage.</p>

<p><strong>String Frozen</strong>
In Ruby, every time you declare a string, a new object is created then the string data copied into it. In other word, if you have a string literal in you method, every time you call the method, a new string object will be created, it may lead to performance issue in real world application.</p>

<p>Of course you can avoid this problem with Symbols because every Symbol instance in Ruby is single instance, you always refer to the same instance.</p>

<p>Unfortunately Symbols are not sting, you cannot split it, index it or search through it. You have to convert the Symbol to a string before performing these actions. You can use symbols when referring to &ldquo;the thing called,&rdquo; but manipulating them in any way is out of the question. What&rsquo;s needed is something in between a symbol and a mutable string. This is what frozen strings are for.</p>

<p>In the past, you were able to create frozen strings using &ldquo;some string"f. Notice the f suffix. This syntax has been removed (or deprecated), and the more standard "some string&rdquo;.freeze method syntax optimised. Frozen strings are created once, and are immutable just like symbols, but all of the traditional string methods (barring those that modify the string) are available. While frozen strings are not new, the optimisation of the .freeze method is new.</p>

<p><strong>String Scrubbing</strong></p>

<p><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>Scrubbing strings is important when working with multibyte encoded strings (which Ruby defaults to now). &ldquo;Scrubbing&rdquo; a string is removing invalid byte sequences from a string while keeping all valid byte sequences intact. This is important when sending strings downstream to &ldquo;dumber&rdquo; clients if these clients can conceivably display incorrect data as garbage.</p>

<p>The String#scrub method scrubs all invalid character sequences from a string and returns the new string. It can be called with no arguments like &ldquo;string&rdquo;.scrub, which replaces all invalid sequences with an empty string (&ldquo;deleting&rdquo; them). You can also call it with a simple string replacement, such as &ldquo;abc\u3042\x81&rdquo;.scrub(&ldquo;X&rdquo;) which replaced the invalid sequence \x81 with X, producing the string &ldquo;abc\u3042X&rdquo;. You can also use a block, and the docs for the method give a very useful method for debugging: a block that replaces all invalid sequences with their hex equivalent so you can see the invalid sequences without delving into the Ruby debugger or IRB: &ldquo;abc\u3042\xE3\x80&rdquo;.scrub{|bytes| &lsquo;&lt;&rsquo;+bytes.unpack(&lsquo;H*&rsquo;)[0]+&lsquo;>&rsquo; }. This will produce the string &ldquo;abc\u3042&rdquo;.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://www.sitepoint.com/look-ruby-2-1/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>http://ruby.about.com/od/Whats-New-in-Ruby-210/fl/Whats-new-in-Ruby-210-Strings.htm<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
