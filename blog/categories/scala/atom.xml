<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | George's dream port]]></title>
  <link href="http://puffsun.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://puffsun.github.io/"/>
  <updated>2014-03-07T23:27:32+08:00</updated>
  <id>http://puffsun.github.io/</id>
  <author>
    <name><![CDATA[George Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solutions of Scala for the Impatient - Chapter3]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/07/scala-for-the-impatient-chapter3/"/>
    <updated>2014-03-07T23:01:32+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/07/scala-for-the-impatient-chapter3</id>
    <content type="html"><![CDATA[<p>In this blog post, I will continue to post the solutions of <a href="http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094">Scala for the Impatient</a>, Chapter 3 as book notes, hopes it could help if you&rsquo;re reading the book too. Without further ado, let&rsquo;s see the solutions in Scala.</p>

<p>1. Write a code snippet that sets a to an array of n random integers between 0 (inclusive) and n (exclusive).
```scala</p>

<p>import scala.util.Random</p>

<p>def random_arr(n: Int) = {</p>

<pre><code>Array.fill(n) {Random.nextInt(n)}
</code></pre>

<p>}
```</p>

<!--more-->


<p>2. Write a loop that swaps adjacent elements of an array of integers. For example, <code>Array(1, 2, 3, 4, 5)</code> becomes <code>Array(2, 1, 4, 3, 5)</code>.
```scala</p>

<pre><code>val arr = Array(1, 2, 3, 4, 5)
arr.grouped(2).flatMap {
    case Array(x, y) =&gt; Array(y, x)
    case Array(x) =&gt; Array(x)
}.toArray
</code></pre>

<p>```</p>

<p>3. Repeat the preceding assignment, but produce a new array with the swapped values. Use <code>for/yield</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.
```scala</p>

<pre><code>val arr = Array(1, 2, 3, 4, 5)
val new_arr = for (i &lt;- 0 until arr.length) yield {
if (i % 2 == 0 &amp;&amp; i &lt; arr.length - 1)
arr(i + 1)
else if (i % 2 != 0 &amp;&amp; i &gt; 0)
    arr(i - 1)
else
    arr(i)
</code></pre>

<p>   }
```</p>

<p>4. Given an array of integers, produce a new array that contains all positive values of the original array, in their original order, followed by all values that are zero or negative, in their original order.</p>

<p>There&rsquo;s a function called <code>partition</code> built-in into Scala by <a href="http://www.scala-lang.org/api/2.10.3/index.html#scala.collection.mutable.ArrayOps">ArrayOps</a> class, below is the implementation via <code>partition</code>:
```scala</p>

<pre><code>val arr = Array(-1, 2, -3, -3.2, -9, 9, 8, 5, -10)
val p = arr.partition {_ &gt; 0}
p._1 ++ p._2  // produce Array(2.0, 9.0, 8.0, 5.0, -1.0, -3.0, -3.2, -9.0, -10.0)
</code></pre>

<p>```
Of course, we can also achieve without using the partition function, let&rsquo;s do it:</p>

<p>```scala</p>

<pre><code>val ta = for (e &lt;- a if e &gt; 0) yield e
val tb = for (e &lt;- a if e &lt;= 0) yield e
ta ++ tb // produce: Array(2.0, 9.0, 8.0, 5.0, -1.0, -3.0, -3.2, -9.0, -10.0)
</code></pre>

<p>```</p>

<p>5. How do you compute the average of an <code>Array[Double]</code>?
```scala</p>

<pre><code>val arr = Array(-1, 2, -3, -3.2, -9, 9, 8, 5, -10)
arr.sum / arr.size
</code></pre>

<p>```
6. How do you rearrange the elements of an <code>Array[Int]</code> so that they appear in reverse sorted order? How do you do the same with an <code>ArrayBuffer[Int]</code>?</p>

<p>With array, we can sort it in reverse order by below code:
```scala</p>

<pre><code>import scala.util.Sorting
val arr = Array(-1, 2, -3, -3.2, -9, 9, 8, 5, -10)
Sorting.quickSort(are)  // Sort the array in place
arr.reverse
</code></pre>

<p>```</p>

<p>With ArrayBuffer:
```scala</p>

<pre><code>import collection.mutable.ArrayBuffer
val a = ArrayBuffer(3, 2, 5, 8, 9, -1, -7)
a.sortWith(_&gt;_)
</code></pre>

<p>```</p>

<p>7. Write a code snippet that produces all values from an array with duplicates removed. (Hint: Look at Scaladoc.)
```scala</p>

<pre><code>val arr = Array(1, 2, -1, 1, 2, 1)
arr.distinct // produce Array(1, 2, -1)
</code></pre>

<p>```
8. Rewrite the example at the end of Section 3.4, “Transforming Arrays,” on page 32. Collect indexes of the negative elements, reverse the sequence, drop the last index, and call <code>a.remove(i)</code> for each index. Compare the efficiency of this approach with the two approaches in Section 3.4.</p>

<p>We can get the same result with below code:
```scala</p>

<pre><code>import collection.mutable.ArrayBuffer

val a = ArrayBuffer(1, 3, 9, -1, -6, 4, -2)
var indexes = for (i &lt;- 0 until a.length if a(i) &lt; 0) yield i
indexes = indexes.reverse
indexes.dropRight(1)
for (i &lt;- 0 until indexes.length) {
    a.remove(indexes(i))
}
</code></pre>

<p>```
Now let see the time/space efficiency of above code. First, we use indexes to store the indexes of negative numbers, so it will take O(n) extra space. Then we traverse the original array for two times, reverse the indexes of negative numbers once, so the total time complexity will be 3 * O(n) ~ O(n)</p>

<p>9. Make a collection of all time zones returned by <code>java.util.TimeZone.getAvailableIDs</code> that are in America. Strip off the &ldquo;America/&rdquo; prefix and sort the result.
```scala</p>

<pre><code>val zones = java.util.TimeZone.getAvailableIDs()
val zones_no_prefix = for (zone &lt;- zones if zone.startsWith("America")) yield zone.stripPrefix("America/")
util.Sorting.quickSort(zones_no_prefix)
</code></pre>

<p>```</p>

<p>10. Import <code>java.awt.datatransfer._</code> and make an object of type <code>SystemFlavorMap</code> with the call <code>val flavors = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]</code>, Then call the <code>getNativesForFlavor</code> method with parameter <code>DataFlavor.imageFlavor</code> and get the return value as a Scala buffer. (Why this obscure class? It’s hard to find uses of <code>java.util.List</code> in the standard Java library.)
```scala</p>

<pre><code>val flavMap = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]
val natives = flavMap.getNativesForFlavor(DataFlavor.imageFlavor)
</code></pre>

<p>```</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://bitbucket.org/McDamon/scalaimpatient/src/4a11167459b2/ch03/answers.txt">Scala for the Impatient</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions of Scala for the Impatient - Chapter1 and Chapter2]]></title>
    <link href="http://puffsun.github.io/blog/2014/02/24/scala-for-the-impatient-solutions-ch1-and-ch2/"/>
    <updated>2014-02-24T20:09:58+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/02/24/scala-for-the-impatient-solutions-ch1-and-ch2</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;m reading the book <a href="http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094">Scala for the Impatient</a>, the book is pretty brilliant, you can see that from the comments. Since I&rsquo;m a newbie to Scala, I&rsquo;m try to complete the exercises after every chapter, I post the solutions in a serious of blog posts as book notes.</p>

<p>Since both chapter 1 and chapter 2 are very simple, I&rsquo;ll post the solutions together here with this blog post.</p>

<!--more-->


<h3>Solutions of Chapter 1</h3>

<p>8. One way to create random file or directory names is to produce a random BigInt and convert it to base 36, yielding a string such as &ldquo;qsnvbevtomcj38o06kul&rdquo;. Poke around Scaladoc to find a way of doing this in Scala.</p>

<p>```scala</p>

<pre><code>val tmp = BigInt(100, util.Random).toString(36)
</code></pre>

<p>```
According to <a href="http://www.scala-lang.org/api/2.10.2/index.html#scala.math.BigInt$">BigInt&rsquo;s document</a>, there&rsquo;s a method called apply, which will construct a randomly generated BigInt, uniformly distributed over the range 0 to (2 ^ numBits &ndash; 1), its method signature is <code> def apply(numbits: Int, rnd: Random): BigInt </code>.</p>

<p>9. How do you get the first character of a string in Scala? The last character?</p>

<p>```scala</p>

<pre><code>val str = "abcd"
str.head // get the first
str.dropRight(1)
</code></pre>

<p>```
There&rsquo;re several way to achieve this goal, what I have shown is one of them.</p>

<p>10. What do the take, drop, takeRight, and dropRight string functions do? What advantage or disadvantage do they have over using substring?
To get an idea what they can do, we need to check Scala document.</p>

<p>The difference between then and java.lang.String is that, before Java 7, String#substring method will operate on the original string, it will generate new String instance at all, so it takes constant time to complete the substring operation. But this behaviour changed after Java 7 due to security reasons, for more details, please go to <a href="http://www.javaadvent.com/2012/12/changes-to-stringsubstring-in-java-7.html">Changes to String.substring in Java 7</a>. After this change, substring will always produce new String instances, which will take linear time to complete the operation.</p>

<p>As far as I know, in Scala, the take* and drop* method will always generate new String instances(please correct me if I&rsquo;m wrong), I think this is the difference.</p>

<h3>Solutions of Chapter 2</h3>

<p>1. The signum of a number is 1 if the number is positive, –1 if it is negative, and 0 if it is zero. Write a function that computes this value.
```scala</p>

<pre><code>def signum(num: Int) = { if (num &gt; 0) 1 else if (num &lt; 0) -1 else 0 }
</code></pre>

<p>```
Notice that I didn&rsquo;t use return statement in above code, it a best practice to avoid the return statement in Scala.</p>

<p>2. What is the value of an empty block expression {}? What is its type?
It&rsquo;s of type Unit, you can verify that with <code> {}.getClass </code> inside Scala interactive shell.</p>

<p>3. Come up with one situation where the assignment x = y = 1 is valid in Scala. (Hint: Pick a suitable type for x.)
```scala</p>

<pre><code>var x: Unit = Unit
var y = 0
x = y = 1
</code></pre>

<p>```</p>

<p>4.Write a Scala equivalent for the Java loop <code>for (int i = 10; i >= 0; i&mdash;) System.out.println(i); </code>
```scala</p>

<pre><code>for (i &lt;- 10 to 0 by -1) println(i)
</code></pre>

<p>```</p>

<p>5. Write a procedure countdown(n: Int) that prints the numbers from n to 0.
```scala</p>

<pre><code>def countdown(num: Int) {
    var step = if (num &gt;= 0) -1 else 1
    for (i &lt;- num to 0 by step) println(i)
}
</code></pre>

<p>```</p>

<p>6. Write a for loop for computing the product of the Unicode codes of all letters in a string. For example, the product of the characters in &ldquo;Hello&rdquo; is 9415087488L.
```scala</p>

<pre><code>var prod = 1
for (i &lt;- "Hello") println(prod * i.toInt)
</code></pre>

<p>```</p>

<p>7. Solve the preceding exercise without writing a loop. (Hint: Look at the StringOps Scaladoc.)
```scala</p>

<pre><code>"Hello".foldLeft(1L) (_ * _.toInt)
</code></pre>

<p>```
Note that here I use 1L instead of 1, because java.lang.Integer.MAX_VALUE is 2147483647, which is too small to hold the produce of products of &ldquo;Hello&rdquo;, so I need to specify Long as the products type.</p>

<p>8. Write a function product(s : String) that computes the product, as described in the preceding exercises.
```scala</p>

<pre><code>def product(str: String) = {
    str.foldLeft(1L) (_ * _.toInt)
}
</code></pre>

<p><code>
9\. Make the function of the preceding exercise a recursive function.
</code>scala</p>

<pre><code>def product_r(str: String): Long = {
    str match {
        case "" =&gt; 1; 
        case _ =&gt; str.head.toInt * product_r(str.tail)
    }
}
</code></pre>

<p>```
Note that we still specify the return value as Long for the same reason above.</p>
]]></content>
  </entry>
  
</feed>
