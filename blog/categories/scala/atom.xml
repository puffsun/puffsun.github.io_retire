<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | George's dream port]]></title>
  <link href="http://puffsun.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://puffsun.github.io/"/>
  <updated>2014-04-07T15:16:43+08:00</updated>
  <id>http://puffsun.github.io/</id>
  <author>
    <name><![CDATA[George Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter5]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/09/scala-for-the-impatient-chapter5/"/>
    <updated>2014-03-09T20:03:35+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/09/scala-for-the-impatient-chapter5</id>
    <content type="html"><![CDATA[<p>1. Improve the Counter class in Section 5.1, “Simple Classes and Parameterless Methods,” on page 49 so that it doesn’t turn negative at <code>Int.MaxValue</code>.</p>

<p>```scala
class Counter {
  private var value = 0</p>

<p>  def increment() {</p>

<pre><code>if ((value + 1) &lt; Int.MaxValue)
  value += 1
</code></pre>

<p>  }
  def current = value
}
```</p>

<!--more-->


<p>2. Write a class <code>BankAccount</code> with methods <code>deposit</code> and <code>withdraw</code>, and a read-only property <code>balance</code>.</p>

<p>```scala
class BankAccount(private var _balance: Double = 0.0) {</p>

<p>  def deposit(amount: Double) = {</p>

<pre><code>_balance += amount
</code></pre>

<p>  }</p>

<p>  def withdraw(amount: Double) = {</p>

<pre><code>if (balance &gt; amount) {
  _balance -= amount
  true
} else {
  false
}
</code></pre>

<p>  }</p>

<p>  def balance = _balance
}
```</p>

<p>3. Write a class <code>Time</code> with read-only properties <code>hours</code> and <code>minutes</code> and a method <code>before(other: Time): Boolean</code> that checks whether this time comes before the other. A <code>Time</code> object should be constructed as <code>new Time(hrs, min)</code>, where hrs is in military time format (between 0 and 23).
```scala
class Time(val hours: Int, val minutes: Int) {
  // Validations goes here.
  if (hours > 23 || hours &lt; 0) {</p>

<pre><code>throw new IllegalArgumentException("should larger than 0 or smaller than 23")
</code></pre>

<p>  }</p>

<p>  if (minutes &lt; 0 || minutes > 59) {</p>

<pre><code>throw new IllegalArgumentException("should larger than 0 or small than 59")
</code></pre>

<p>  }</p>

<p>  def before(other: Time): Boolean = {</p>

<pre><code>if (hours &lt; other.hours) {
  if (minutes &lt;  other.minutes) {
    return true
  }
}
false
</code></pre>

<p>  }
}
```</p>

<p>4. Reimplement the Time class from the preceding exercise so that the internal representation is the number of minutes since midnight (between 0 and 24 × 60 – 1). Do not change the public interface. That is, client code should be unaffected by your change.</p>

<p>```scala
class Time(private val <em>hours: Int, private val </em>minutes: Int) {</p>

<p>  if (hours > 23 || hours &lt; 0) {</p>

<pre><code>throw new IllegalArgumentException("should larger than 0 or smaller than 23")
</code></pre>

<p>  }</p>

<p>  if (minutes &lt; 0 || minutes > 59) {</p>

<pre><code>throw new IllegalArgumentException("should larger than 0 or small than 59")
</code></pre>

<p>  }</p>

<p>  private val <em>total_minutes = </em>hours * 60 + _minutes</p>

<p>  def minutes = <em>minutes
  def hours = </em>hours</p>

<p>  def before(other: Time): Boolean = {</p>

<pre><code>if (_total_minutes &lt; other._total_minutes)
  true
else
  false
</code></pre>

<p>  }
}
```</p>

<p>5. Make a class <code>Student</code> with read-write JavaBeans properties name (of type <code>String</code>) and id (of type <code>Long</code>). What methods are generated? (Use javap to check.) Can you call the JavaBeans getters and setters in Scala Should you?<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>
```scala
import scala.reflect.BeanProperty</p>

<p>class Student(@BeanProperty var name: String, @BeanProperty var id: Long) {<br/>
}</p>

<p>object Main extends App {
  val human = new Student(&ldquo;Dave Grohl&rdquo;, 1337)</p>

<p>  // You can call the JavaBeans getter and setter, just like this
  human.setName(&ldquo;Kurt Cobain&rdquo;)
  human.setId(5000)</p>

<p>  // But why would you, when the Scala-esque methods are generated?
  human.name = &ldquo;Krist Novoselic&rdquo;
  human.id = 5001
}
```</p>

<p>The output of javap as below:
<code>
$ javap Student
// Compiled from "ch5_exercises.scala"
public class Student {
  public java.lang.String name();
  public void name_$eq(java.lang.String);
  public void setName(java.lang.String);
  public long id();
  public void id_$eq(long);
  public void setId(long);
  public java.lang.String getName();
  public long getId();
  public Student(java.lang.String, long);
}
</code>
You can see that Scala generate getters/setters for you, as well as <code>name</code>, <code>name_=</code>, <code>id</code>, and <code>id_=</code>.</p>

<p>6. In the <code>Person</code> class of Section 5.1, “Simple Classes and Parameterless Methods,” on page 49, provide a primary constructor that turns negative ages to 0.
```scala
class Person(val <em>name: String, var </em>age: Int) {
  if (_age &lt; 0)</p>

<pre><code>_age = 0
</code></pre>

<p>  def age = <em>age
  def age</em>=(new_age: Int) {</p>

<pre><code>if (new_age &gt; _age)
  _age = new_age
</code></pre>

<p>  }
}
```</p>

<p>7. Write a class <code>Person</code> with a primary constructor that accepts a string containing a first name, a space, and a last name, such as <code>new Person(&ldquo;Fred Smith&rdquo;)</code>. Supply read-only properties <code>firstName</code> and <code>lastName</code>. Should the primary constructor parameter be a var, a val, or a plain parameter? Why?
```scala
class Person(val fullname: String) {
  if (fullname == null || fullname.split(&ldquo; &rdquo;).size &lt; 2)</p>

<pre><code>throw new IllegalArgumentException("Name is not be in format of first_name last_name")
</code></pre>

<p>  private val tmp_name = fullname.split(&ldquo; &rdquo;)
  val firstName = tmp_name(0)
  val lastName = tmp_name(1)
}
```
As the primary constructor parameter name suggests, it should be a val to prevent it from being changed, at the same time, it should have a public getter method so that others can get the person&rsquo;s full name.</p>

<p>8. Make a class <code>Car</code> with read-only properties for <code>manufacturer</code>, <code>model name</code>, and <code>model year</code>, and a read-write property for the <code>license plate</code>. Supply four constructors. All require the <code>manufacturer</code> and <code>model name</code>. Optionally, <code>model year</code> and <code>license plate</code> can also be specified in the constructor. If not, the <code>model year</code> is set to -1 and the <code>license plate</code> to the empty string. Which constructor are you choosing as the primary constructor? Why?</p>

<p>We only need primary constructor here, it can take default parameters, which we can leverage to eliminate the auxiliary constructor, as below code shown:
```scala
class Car(val manufacturer: String,</p>

<pre><code>val modelName: String, 
val modelYear: Int = -1, 
var licensePlate: String = "") {
</code></pre>

<p>}
```</p>

<p>9. Reimplement the class of the preceding exercise in Java, C#, or C++ (your choice). How much shorter is the Scala class?</p>

<p>Equivalent Java code as below:
```java
public class Car {</p>

<pre><code>private String manufacturer;
private String modelName;
private int year;
private String licensePlate;

public Class(String manufacturer, String modelName, int modelYear, String licensePlate) {
    this.manufacturer = manufacturer;
    this.modelName = modelName;
    this.year = year;
    this.licensePlate = licensePlate;
}

public Class(String manufacturer, String modelName) {
    this(manufacturer, modelName, -1, "");
}

public Class(String manufacturer, String modelName, int modelYear) {
    this(manufacturer, modelName, modelYear, "");
}

public Class(String manufacturer, String modelName, String licensePlate) {
    this(manufacturer, modelName, -1, licensePlate);
}

// Getters and Setters neglected.
</code></pre>

<p>}
```</p>

<p>10. Consider the class
<code>scala
class Employee(val name: String, var salary: Double) {
  def this() { this("John Q. Public", 0.0) }
}
</code>
Rewrite it to use explicit fields and a default primary constructor. Which form do you prefer? Why?</p>

<p><code>scala
class Employee(val name: String = "John Q. Public", var salary: Double = 0.0) {}
</code>
I prefer to above code, using primary constructor with default parameters, also there&rsquo;s no explicit getters/setters. After falling love with Ruby programming language, I prefer to any coding style that can lead to concise and short code, most of time, short code is easy to maintain, to test and to develop.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://bitbucket.org/McDamon/scalaimpatient/src/4a11167459b2/ch05/answers.txt">Scala for the Impatient, by McDamon</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter4]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/08/scala-for-the-impatient-chapter4/"/>
    <updated>2014-03-08T20:49:44+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/08/scala-for-the-impatient-chapter4</id>
    <content type="html"><![CDATA[<p>1. Set up a map of prices for a number of gizmos that you covet. Then produce a second map with the same keys and the prices at a 10 percent discount.</p>

<p><code>scala
val books = Map("Scala for the Impatient" -&gt; 30, "Ruby under a Microscope" -&gt; 40, "Ruby Cookbook" -&gt; 35)
val discounted = for((b, p) &lt;- books) yield (b, p * 0.9)
</code></p>

<!--more-->


<p>2. Write a program that reads words from a file. Use a mutable map to count how often each word appears. To read the words, simply use a <code>java.util.Scanner</code>:
```scala
val in = new java.util.Scanner(new java.io.File(&ldquo;myfile.txt&rdquo;))
while (in.hasNext())</p>

<pre><code>process in.next()
</code></pre>

<p>```
Or look at Chapter 9 for a Scalaesque way.
At the end, print out all words and their counts.</p>

<p>```scala
def count_words(file: String): Unit = {</p>

<pre><code>val container = collection.mutable.Map[String, Int]()
val in = new java.util.Scanner(new java.io.File(file))
while (in.hasNext()) {
    val word =  in.next()
    if (container.contains(word))
        container(word) += 1
    else
        container(word) = 1
}
for ((k, v) &lt;- container)
    println(k + ": " + v)
</code></pre>

<p>}
```</p>

<p>3. Repeat the preceding exercise with an immutable map.
```scala
def count_words(file: String): Unit = {</p>

<pre><code>var container = Map[String, Int]()
val in = new java.util.Scanner(new java.io.File(file))
while (in.hasNext()) {
    val word = in.next()
    container = container + (word -&gt; (container.getOrElse(word, 0) + 1))
}
println(container)
</code></pre>

<p>}
<code>
Or we can achieve nearly the same more Scalaesque(the result is little different, but you get the idea)[^1]:
</code>scala
import scala.io.Source</p>

<p>def count_words(file: String): Unit = {</p>

<pre><code>val source = Source.fromFile(file)
val words = for (word &lt;- source.getLines.toArray) yield word
val wordCounts = for (word &lt;- words.distinct) yield {
    (word, words.count(_ == word))
}
val wordCountsMap = wordCounts.toMap
println(wordCountsMap)
</code></pre>

<p>}
```</p>

<p>4. Repeat the preceding exercise with a sorted map, so that the words are printed in sorted order.
```scala
def count_words(file: String): Unit = {</p>

<pre><code>var container = collection.immutable.SortedMap[String, Int]()
val in = new java.util.Scanner(new java.io.File(file))
while (in.hasNext()) {
    val word = in.next()
    container = container + (word -&gt; (container.getOrElse(word, 0) + 1))
}
println(container)
</code></pre>

<p>}
```</p>

<p>5. Repeat the preceding exercise with a <code>java.util.TreeMap</code> that you adapt to the Scala API.
```scala
def count_words(file: String): Unit = {</p>

<pre><code>val container = new java.util.TreeMap[String, Int]
val in = new java.util.Scanner(new java.io.File(file))
while (in.hasNext()) {
    val word =  in.next()
    if (container.containsKey(word))
        container.put(word, container.get(word) + 1)
    else
        container.put(word, 1)
}
println(container)
</code></pre>

<p>}
```</p>

<p>6. Define a linked hash map that maps &ldquo;Monday&rdquo; to <code>java.util.Calendar.MONDAY</code>, and similarly for the other weekdays. Demonstrate that the elements are visited in insertion order.
```scala
val daysOfTheWeek = LinkedHashMap(&ldquo;Monday&rdquo; &ndash;> java.util.Calendar.MONDAY,</p>

<pre><code>"Tuesday" -&gt; java.util.Calendar.TUESDAY,
"Wednesday" -&gt; java.util.Calendar.WEDNESDAY,
"Thursday" -&gt; java.util.Calendar.THURSDAY,
"Friday" -&gt; java.util.Calendar.FRIDAY,
"Saturday" -&gt; java.util.Calendar.SATURDAY,
"Sunday" -&gt; java.util.Calendar.SUNDAY)
</code></pre>

<p>println(daysOfTheWeek)
```</p>

<p>7. Print a table of all Java properties, like this:
<code>
java.runtime.name             | Java(TM) SE Runtime Environment
sun.boot.library.path         | /home/apps/jdk1.6.0_21/jre/lib/i386
java.vm.version               | 17.0-b16
java.vm.vendor                | Sun Microsystems Inc.
java.vendor.url               | http://java.sun.com/
path.separator                | :
java.vm.name                  | Java HotSpot(TM) Server VM
</code>
You need to find the length of the longest key before you can print the table.
<code>scala
import scala.collection.JavaConversions.propertiesAsScalaMap
val props: scala.collection.Map[String, String] = System.getProperties
val len = props.keys.maxBy(_.length).length // java.vm.specification.version
for ((k, v) &lt;- props) printf("%-"+ len + "s|%s\n", k, v)
</code></p>

<p>8. Write a function <code>min_max(values: Array[Int])</code> that returns a pair containing the smallest and largest values in the array.
```scala
def min_max(values: Array[Int]): Tuple2[Int, Int] = {</p>

<pre><code>(values.min, values.max)
</code></pre>

<p>}
```</p>

<p>9. Write a function lt_eq_gt(values: Array[Int], v: Int) that returns a triple containing the counts of values less than v, equal to v, and greater than v.
```scala
def lt_eg_gt(values: Array[Int], v: Int): Tuple3[Int, Int, Int] = {</p>

<pre><code>(values.count(_ &lt; v), values.count(_ == v), values.count(_&gt; v))
</code></pre>

<p>}
```</p>

<p>10. What happens when you zip together two strings, such as <code>&ldquo;Hello&rdquo;.zip(&ldquo;World&rdquo;)</code>? Come up with a plausible use case.
<code>scala
// produce: scala.collection.immutable.IndexedSeq[(Char, Char)] = Vector((H,W), (e,o), (l,r), (l,l), (o,d))
"Hello".zip("World")
</code>
From above code we can see that the zip of two String will produce a immutable Vector, which contains Tuples. The Tuples contains a pair of characters in the same position. A possible use case is to produce a immutable map with left characters as keys and right side characters as values, you can transfer the zipped characters to a immutable map via:
<code>scala
val map = "Hello".zip("World").toMap
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter3]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/07/scala-for-the-impatient-chapter3/"/>
    <updated>2014-03-07T23:01:32+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/07/scala-for-the-impatient-chapter3</id>
    <content type="html"><![CDATA[<p>In this blog post, I will continue to post the solutions to <a href="http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094">Scala for the Impatient</a>, Chapter 3 as book notes, hopes it could help if you&rsquo;re reading the book too. Without further ado, let&rsquo;s see the solutions in Scala.</p>

<p>1. Write a code snippet that sets a to an array of n random integers between 0 (inclusive) and n (exclusive).
```scala</p>

<p>import scala.util.Random</p>

<p>def random_arr(n: Int) = {</p>

<pre><code>Array.fill(n) {Random.nextInt(n)}
</code></pre>

<p>}
```</p>

<!--more-->


<p>2. Write a loop that swaps adjacent elements of an array of integers. For example, <code>Array(1, 2, 3, 4, 5)</code> becomes <code>Array(2, 1, 4, 3, 5)</code>.
```scala</p>

<pre><code>val arr = Array(1, 2, 3, 4, 5)
arr.grouped(2).flatMap {
    case Array(x, y) =&gt; Array(y, x)
    case Array(x) =&gt; Array(x)
}.toArray
</code></pre>

<p>```</p>

<p>3. Repeat the preceding assignment, but produce a new array with the swapped values. Use <code>for/yield</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.
```scala</p>

<pre><code>val arr = Array(1, 2, 3, 4, 5)
val new_arr = for (i &lt;- 0 until arr.length) yield {
if (i % 2 == 0 &amp;&amp; i &lt; arr.length - 1)
arr(i + 1)
else if (i % 2 != 0 &amp;&amp; i &gt; 0)
    arr(i - 1)
else
    arr(i)
</code></pre>

<p>   }
```</p>

<p>4. Given an array of integers, produce a new array that contains all positive values of the original array, in their original order, followed by all values that are zero or negative, in their original order.</p>

<p>There&rsquo;s a function called <code>partition</code> built-in into Scala by <a href="http://www.scala-lang.org/api/2.10.3/index.html#scala.collection.mutable.ArrayOps">ArrayOps</a> class, below is the implementation via <code>partition</code>:
```scala</p>

<pre><code>val arr = Array(-1, 2, -3, -3.2, -9, 9, 8, 5, -10)
val p = arr.partition {_ &gt; 0}
p._1 ++ p._2  // produce Array(2.0, 9.0, 8.0, 5.0, -1.0, -3.0, -3.2, -9.0, -10.0)
</code></pre>

<p>```
Of course, we can also achieve without using the partition function, let&rsquo;s do it:</p>

<p>```scala</p>

<pre><code>val ta = for (e &lt;- a if e &gt; 0) yield e
val tb = for (e &lt;- a if e &lt;= 0) yield e
ta ++ tb // produce: Array(2.0, 9.0, 8.0, 5.0, -1.0, -3.0, -3.2, -9.0, -10.0)
</code></pre>

<p>```</p>

<p>5. How do you compute the average of an <code>Array[Double]</code>?
```scala</p>

<pre><code>val arr = Array(-1, 2, -3, -3.2, -9, 9, 8, 5, -10)
arr.sum / arr.size
</code></pre>

<p>```
6. How do you rearrange the elements of an <code>Array[Int]</code> so that they appear in reverse sorted order? How do you do the same with an <code>ArrayBuffer[Int]</code>?</p>

<p>With array, we can sort it in reverse order by below code:
```scala</p>

<pre><code>import scala.util.Sorting
val arr = Array(-1, 2, -3, -3.2, -9, 9, 8, 5, -10)
Sorting.quickSort(are)  // Sort the array in place
arr.reverse
</code></pre>

<p>```</p>

<p>With ArrayBuffer:
```scala</p>

<pre><code>import collection.mutable.ArrayBuffer
val a = ArrayBuffer(3, 2, 5, 8, 9, -1, -7)
a.sortWith(_&gt;_)
</code></pre>

<p>```</p>

<p>7. Write a code snippet that produces all values from an array with duplicates removed. (Hint: Look at Scaladoc.)
```scala</p>

<pre><code>val arr = Array(1, 2, -1, 1, 2, 1)
arr.distinct // produce Array(1, 2, -1)
</code></pre>

<p>```
8. Rewrite the example at the end of Section 3.4, “Transforming Arrays,” on page 32. Collect indexes of the negative elements, reverse the sequence, drop the last index, and call <code>a.remove(i)</code> for each index. Compare the efficiency of this approach with the two approaches in Section 3.4.</p>

<p>We can get the same result with below code:
```scala</p>

<pre><code>import collection.mutable.ArrayBuffer

val a = ArrayBuffer(1, 3, 9, -1, -6, 4, -2)
var indexes = for (i &lt;- 0 until a.length if a(i) &lt; 0) yield i
indexes = indexes.reverse
indexes.dropRight(1)
for (i &lt;- 0 until indexes.length) {
    a.remove(indexes(i))
}
</code></pre>

<p>```
Now let see the time/space efficiency of above code. First, we use indexes to store the indexes of negative numbers, so it will take O(n) extra space. Then we traverse the original array for two times, reverse the indexes of negative numbers once, so the total time complexity will be 3 * O(n) ~ O(n)</p>

<p>9. Make a collection of all time zones returned by <code>java.util.TimeZone.getAvailableIDs</code> that are in America. Strip off the &ldquo;America/&rdquo; prefix and sort the result.
```scala</p>

<pre><code>val zones = java.util.TimeZone.getAvailableIDs()
val zones_no_prefix = for (zone &lt;- zones if zone.startsWith("America")) yield zone.stripPrefix("America/")
util.Sorting.quickSort(zones_no_prefix)
</code></pre>

<p><code>
Another solution more in Scala way:
</code>scala
val zones = java.util.TimeZone.getAvailableIDs
val zones_no_prefix = zones.filter(<em>.startsWith(&ldquo;America/&rdquo;)).map(</em>.drop(&ldquo;America/&rdquo;.size))
util.Sorting.quickSort(zones_no_prefix)
```</p>

<p>10. Import <code>java.awt.datatransfer._</code> and make an object of type <code>SystemFlavorMap</code> with the call <code>val flavors = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]</code>, Then call the <code>getNativesForFlavor</code> method with parameter <code>DataFlavor.imageFlavor</code> and get the return value as a Scala buffer. (Why this obscure class? It’s hard to find uses of <code>java.util.List</code> in the standard Java library.)
```scala</p>

<pre><code>val flavMap = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]
val natives = flavMap.getNativesForFlavor(DataFlavor.imageFlavor)
</code></pre>

<p>```</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://bitbucket.org/McDamon/scalaimpatient/src/4a11167459b2/ch03/answers.txt">Scala for the Impatient solutions, by McDamon</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter1 and Chapter2]]></title>
    <link href="http://puffsun.github.io/blog/2014/02/24/scala-for-the-impatient-solutions-ch1-and-ch2/"/>
    <updated>2014-02-24T20:09:58+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/02/24/scala-for-the-impatient-solutions-ch1-and-ch2</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;m reading the book <a href="http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094">Scala for the Impatient</a>, the book is pretty brilliant, you can see that from the comments. Since I&rsquo;m a newbie to Scala, I&rsquo;m try to complete the exercises after every chapter, I post the solutions in a serious of blog posts as book notes.</p>

<p>Since both chapter 1 and chapter 2 are very simple, I&rsquo;ll post the solutions together here with this blog post.</p>

<!--more-->


<h3>Solutions to exercises of Chapter 1</h3>

<p>8. One way to create random file or directory names is to produce a random BigInt and convert it to base 36, yielding a string such as &ldquo;qsnvbevtomcj38o06kul&rdquo;. Poke around Scaladoc to find a way of doing this in Scala.</p>

<p>```scala</p>

<pre><code>val tmp = BigInt(100, util.Random).toString(36)
</code></pre>

<p>```
According to <a href="http://www.scala-lang.org/api/2.10.2/index.html#scala.math.BigInt$">BigInt&rsquo;s document</a>, there&rsquo;s a method called apply, which will construct a randomly generated BigInt, uniformly distributed over the range 0 to (2 ^ numBits &ndash; 1), its method signature is <code> def apply(numbits: Int, rnd: Random): BigInt </code>.</p>

<p>9. How do you get the first character of a string in Scala? The last character?</p>

<p>```scala</p>

<pre><code>val str = "abcd"
str.head // get the first
str.dropRight(1)
</code></pre>

<p>```
There&rsquo;re several way to achieve this goal, what I have shown is one of them.</p>

<p>10. What do the take, drop, takeRight, and dropRight string functions do? What advantage or disadvantage do they have over using substring?
To get an idea what they can do, we need to check Scala document.</p>

<p>The difference between then and java.lang.String is that, before Java 7, String#substring method will operate on the original string, it will generate new String instance at all, so it takes constant time to complete the substring operation. But this behaviour changed after Java 7 due to security reasons, for more details, please go to <a href="http://www.javaadvent.com/2012/12/changes-to-stringsubstring-in-java-7.html">Changes to String.substring in Java 7</a>. After this change, substring will always produce new String instances, which will take linear time to complete the operation.</p>

<p>As far as I know, in Scala, the take* and drop* method will always generate new String instances(please correct me if I&rsquo;m wrong), I think this is the difference.</p>

<h3>Solutions to exercises of Chapter 2</h3>

<p>1. The signum of a number is 1 if the number is positive, –1 if it is negative, and 0 if it is zero. Write a function that computes this value.
```scala</p>

<pre><code>def signum(num: Int) = { if (num &gt; 0) 1 else if (num &lt; 0) -1 else 0 }
</code></pre>

<p>```
Notice that I didn&rsquo;t use return statement in above code, it a best practice to avoid the return statement in Scala.</p>

<p>2. What is the value of an empty block expression {}? What is its type?
It&rsquo;s of type Unit, you can verify that with <code> {}.getClass </code> inside Scala interactive shell.</p>

<p>3. Come up with one situation where the assignment x = y = 1 is valid in Scala. (Hint: Pick a suitable type for x.)
```scala</p>

<pre><code>var x: Unit = Unit
var y = 0
x = y = 1
</code></pre>

<p>```</p>

<p>4.Write a Scala equivalent for the Java loop <code>for (int i = 10; i >= 0; i&mdash;) System.out.println(i); </code>
```scala</p>

<pre><code>for (i &lt;- 10 to 0 by -1) println(i)
</code></pre>

<p>```</p>

<p>5. Write a procedure countdown(n: Int) that prints the numbers from n to 0.
```scala</p>

<pre><code>def countdown(num: Int) {
    var step = if (num &gt;= 0) -1 else 1
    for (i &lt;- num to 0 by step) println(i)
}
</code></pre>

<p>```</p>

<p>6. Write a for loop for computing the product of the Unicode codes of all letters in a string. For example, the product of the characters in &ldquo;Hello&rdquo; is 9415087488L.
```scala</p>

<pre><code>var prod = 1
for (i &lt;- "Hello") println(prod * i.toInt)
</code></pre>

<p>```</p>

<p>7. Solve the preceding exercise without writing a loop. (Hint: Look at the StringOps Scaladoc.)
```scala</p>

<pre><code>"Hello".foldLeft(1L) (_ * _.toInt)
</code></pre>

<p>```
Note that here I use 1L instead of 1, because java.lang.Integer.MAX_VALUE is 2147483647, which is too small to hold the produce of products of &ldquo;Hello&rdquo;, so I need to specify Long as the products type.</p>

<p>8. Write a function product(s : String) that computes the product, as described in the preceding exercises.
```scala</p>

<pre><code>def product(str: String) = {
    str.foldLeft(1L) (_ * _.toInt)
}
</code></pre>

<p><code>
9\. Make the function of the preceding exercise a recursive function.
</code>scala</p>

<pre><code>def product_r(str: String): Long = {
    str match {
        case "" =&gt; 1; 
        case _ =&gt; str.head.toInt * product_r(str.tail)
    }
}
</code></pre>

<p>```
Note that we still specify the return value as Long for the same reason above.</p>
]]></content>
  </entry>
  
</feed>
