<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[George's dream port]]></title>
  <link href="http://puffsun.github.io/atom.xml" rel="self"/>
  <link href="http://puffsun.github.io/"/>
  <updated>2014-04-07T07:20:56+08:00</updated>
  <id>http://puffsun.github.io/</id>
  <author>
    <name><![CDATA[George Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Singleton Pattern in Java]]></title>
    <link href="http://puffsun.github.io/blog/2014/04/07/singleton-pattern-in-java/"/>
    <updated>2014-04-07T06:54:11+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/04/07/singleton-pattern-in-java</id>
    <content type="html"><![CDATA[<p>The Singleton pattern is deceptively simple, even and especially for Java developers, but it presents a number of pitfalls for the unwary Java developer which make it hard to implement properly. In this article, I&rsquo;ll talk about several ways to implement the Singleton pattern in Java, and leave it to you to decide which one is best suited for your circumstance depending on your requirement.</p>

<!--more-->


<p>With the Singleton design pattern you can:</p>

<ul>
<li>Ensure that only one instance of a class is created</li>
<li>Provide a global point of access to the object</li>
<li>Allow multiple instances in the future without affecting a singleton class&rsquo;s clients</li>
</ul>


<h3>The classic Singleton pattern<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h3>

<p>In Design Patterns: <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Elements of Reusable Object-Oriented Software</a>, the GoF describe the Singleton pattern like this:</p>

<blockquote><p>Ensure a class has only one instance, and provide a global point of access to it.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassicSingleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ClassicSingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">ClassicSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Exists only to defeat instantiation.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ClassicSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassicSingleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above code is easy to understand, the ClassicSingleton hold a static reference to the single instance and returns that reference from the static <code>getInstance()</code> method.</p>

<p>There are several interesting points concerning the ClassicSingleton class.
1. ClassicSingleton employs a technique known as lazy instantiation to create the singleton; as a result, the singleton instance is not created until the <code>getInstance()</code> method is called for the first time. This technique ensures that singleton instances are created only when needed.
2. It&rsquo;s possible to have multiple singleton instances if classes loaded by different Classloaders access a singleton. That scenario is not so far-fetched; for example, some servlet containers use distinct Classloaders for each servlet, so if two servlets access a singleton, they will each have their own instance.
3. If ClassicSingleton implements the <code>java.io.Serializable</code> interface, the class&rsquo;s instances can be serialized and deserialized. However, if you serialize a singleton object and subsequently deserialize that object more than once, you will have multiple singleton instances.
4. ClassicSingleton class is not thread-safe. If two threads—we&rsquo;ll call them Thread 1 and Thread 2—call <code>ClassicSingleton.getInstance()</code> at the same time, two ClassicSingleton instances can be created if Thread 1 is preempted just after it enters the if block and control is subsequently given to Thread 2.
5. A privileged client can invoke the private constructor reflectively with the aid of the <code>AccessibleObject.setAccessible</code> method. If you need to defend against this attack, modify the constructor to make it throw an exception if it’s asked to create a second instance.</p>

<p>As you can see from the preceding discussion, although the Singleton pattern is one of the simplest design patterns, implementing it in Java is anything but simple. The rest of this article addresses Java-specific considerations for the Singleton pattern.</p>

<h3>Synchronization for multithreading considerations</h3>

<p>Making Singleton thread-safe is easy-just synchronize the <code>getInstance()</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Exists only to defeat instantiation.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the astute reader may realize that the getInstance() method only needs to be synchronized the first time it is called. Because synchronization is very expensive performance-wise, perhaps we can introduce a performance enhancement that only synchronizes the singleton assignment in <code>getInstance()</code>.</p>

<h3>A performance enhancement</h3>

<p>In search of a performance enhancement, you might choose to rewrite the <code>getInstance()</code> method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// CAUTION, BUGS AHEAD</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span><span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">synchronized</span><span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of synchronizing the entire method, the preceding code fragment only synchronizes the critical code. However, the preceding code fragment is not thread-safe. Consider the following scenario: Thread 1 enters the synchronized block, and, before it can assign the singleton member variable, the thread is preempted. Subsequently, another thread can enter the if block. The second thread will wait for the first thread to finish, but we will still wind up with two distinct singleton instances. Is there a way to fix this problem? Read on.</p>

<h3>Double-checked locking</h3>

<p>Double-checked locking is a technique that, at first glance, appears to make lazy instantiation thread-safe. That technique is illustrated in the following code fragment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// CAUTION, BUGS AHEAD</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="kd">synchronized</span><span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span><span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens if two threads simultaneously access <code>getInstance()</code>? Imagine Thread 1 enters the synchronized block and is preempted. Subsequently, a second thread enters the if block. When Thread 1 exits the synchronized block, Thread 2 makes a second check to see if the singleton instance is still null. Since Thread 1 set the singleton member variable, Thread 2&rsquo;s second check will fail, and a second singleton will not be created. Or so it seems.</p>

<p>Unfortunately, double-checked locking is not guaranteed to work because the compiler is free to assign a value to the singleton member variable before the singleton&rsquo;s constructor is called. If that happens, Thread 1 can be preempted after the singleton reference has been assigned, but before the singleton is initialized, so Thread 2 can return a reference to an uninitialized singleton instance.</p>

<p>Since double-checked locking is not guaranteed to work, you must synchronize the entire getInstance() method. However, another alternative is simple, fast, and thread-safe.</p>

<h3>An alternative thread-safe singleton implementation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>   <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">// Exists only to defeat instantiation.</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The preceding singleton implementation is thread-safe because static member variables created when declared are guaranteed to be created the first time they are accessed. You get a thread-safe implementation that automatically employs lazy instantiation, until the class file get loaded into memory, their is no instance instanciated at all.</p>

<p>Of course, like nearly everything else, the preceding singleton is a compromise; if you use that implementation, you can&rsquo;t change your mind and allow multiple singleton instances later on. With a more conservative singleton implementation, instances are obtained through a <code>getInstance()</code> method, and you can change those methods to return a unique instance or one of hundreds. You can&rsquo;t do the same with a public static member variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>   <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">// Exists only to defeat instantiation.</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Leveraging volatile to change Java Memory Model</h3>

<p>We can recheck the instance again in synchronized block to ensure that only one instance of the Singleton object be instantiated, shown as below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">LazySingleton</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// private constructor</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">LazySingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Double check</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please ensure to use <code>volatile</code> keyword with instance variable otherwise you can run into out of order write error scenario, where reference of instance is returned before actually the object is constructed i.e. JVM has only allocated the memory and constructor code is still not executed. In this case, your other thread, which refer to uninitialized object may throw null pointer exception and can even crash the whole application.</p>

<p>Although above code is the correct way to implement Singleton pattern, this is not recommended since it introduce extra complexity of code, which may introduce subtle bugs.</p>

<h3>Classloaders</h3>

<p>Because multiple classloaders are commonly used in many situations—including servlet containers—you can wind up with multiple singleton instances no matter how carefully you&rsquo;ve implemented your singleton classes. If you want to make sure the same classloader loads your singletons, you must specify the classloader yourself; for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Class</span> <span class="nf">getClass</span><span class="o">(</span><span class="n">String</span> <span class="n">classname</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">classLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">classLoader</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">classLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">classname</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The preceding method tries to associate the classloader with the current thread; if that classloader is null, the method uses the same classloader that loaded a singleton base class. The preceding method can be used instead of Class.forName().</p>

<h3>Serialization<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>If you serialize a singleton and then deserialize it twice, you will have two instances of your singleton, unless you implement the <code>readResolve()</code> method, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Exists only to thwart instantiation.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The previous singleton implementation returns the lone singleton instance from the readResolve() method; therefore, whenever the Singleton class is deserialized, it will return the same singleton instance. <strong>Don&rsquo;t forget to add serial version id in this case, or you will get an exception during de-serialise process</strong>.</p>

<h3>Bill Pugh solution<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3>

<p>Bill Pugh was main force behind java memory model changes. His principle “Initialization-on-demand holder idiom” also uses static block but in different way. It suggest to use static inner class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BillPughSingleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">BillPughSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">LazyHolder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BillPughSingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BillPughSingleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">BillPughSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">LazyHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, until we need an instance, the LazyHolder class will not be initialized until required and you can still use other static members of BillPughSingleton class. This is the solution, i will recommend to use. I also use it in my all projects.</p>

<h3>Using Enum</h3>

<p>As of release 1.5, there is a another approach to implementing singletons. which provide implicit support for thread safety and only one instance is guaranteed. This is also a good way to have singleton with minimum effort. Simply make an enum type with one element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Enum singleton - the preferred approach</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Elvis</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This approach is functionally equivalent to the public field approach, except that it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. While this approach has yet to be widely adopted, <strong>a single-element enum type is the best way to implement a singleton</strong>.</p>

<h3>Preventing privileged clients</h3>

<p>As we mentioned before, single pattern can be broken with reflection, as below code shown:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Singleton</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Constructor</span> <span class="n">cons</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">();</span>
</span><span class='line'>    <span class="n">cons</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Another instance can be instantiated now.</span>
</span><span class='line'>    <span class="n">Singleton</span> <span class="n">s2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">)</span> <span class="n">cons</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s easy to get over this issue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivilegedSingleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">PrivilegedSingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrivilegedSingleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">PrivilegedSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Check if we already have an instance</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">INSTANCE</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Singleton instance already created.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">PrivilegedSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes, your IDE will remind you that the <code>INSTANCE</code> variable will never be null, don&rsquo;t rely on that, IDE can make mistake too.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.javaworld.com/article/2073352/core-java/simply-singleton.html">Simply Singleton: Navigate the deceptively simple Singleton pattern</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683">Effective Java, 2nd edition</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://howtodoinjava.com/2012/10/22/singleton-design-pattern-in-java/">Singleton design pattern in Java</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Provider Frameworks]]></title>
    <link href="http://puffsun.github.io/blog/2014/04/06/service-provider-frameworks-pattern/"/>
    <updated>2014-04-06T22:39:44+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/04/06/service-provider-frameworks-pattern</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>In <a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683">Effective Java, second edition</a>, the author mentioned a pattern called Service Provider frameworks. The author wrote:</p>

<blockquote><p>A service provider framework is a system in which multiple service providers implement a service, and the system makes the implementations available to its clients, decoupling them from the implementations.</p></blockquote>

<p>In this blog post, I&rsquo;ll talk about the details of Service Provider Frameworks thru it&rsquo;s application in JDK, to be specific, in JDBC and Codec lookup.</p>

<!--more-->


<p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>As the author said, there are three essential components of a service provider framework: a <strong>service interface</strong>, which providers implement; a <strong>provider registration API</strong>, which the system uses to register implementations, giving clients access to them; and a <strong>service access API</strong>, which clients use to obtain an instance of the service. The service access API typically allows but does not require the client to specify some criteria for choosing a provider. In the absence of such a specification, the API returns an instance of a default implementation. The service access API is the “flexible static factory” that forms the basis of the service provider framework.</p>

<p>An optional fourth component of a service provider framework is a <strong>service provider interface</strong>, which providers implement to create instances of their service implementation. <em>In the absence of a service provider interface, implementations are registered by class name and instantiated reflectively</em>.</p>

<h3>Service Provider Frameworks in JDBC</h3>

<p>In the case of <a href="http://www.oracle.com/technetwork/java/javase/jdbc/index.html">JDBC</a>, <a href="http://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html">Connection</a> plays the part of the service interface, <a href="http://docs.oracle.com/javase/7/docs/api/java/sql/DriverManager.html#registerDriver(java.sql.Driver)">DriverManager.registerDriver</a> is the provider registration API, <a href="http://docs.oracle.com/javase/7/docs/api/java/sql/DriverManager.html#getConnection(java.lang.String)">DriverManager.getConnection</a> is the service access API, and <a href="http://docs.oracle.com/javase/7/docs/api/java/sql/Driver.html">Driver</a> is the service provider interface.</p>

<p>Usually in order to use JDBC, you should execute below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="c1">// Register JDBC driver, before JDBC 4.0 only</span>
</span><span class='line'>  <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Open a connection</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Connecting to database...&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">DB_URL</span><span class="o">,</span><span class="n">USER</span><span class="o">,</span><span class="n">PASS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Class.forname(&ldquo;com.mysql.jdbc.Driver&rdquo;)</code> can be eliminated after JDBC 4.0, as you can see in the document of <a href="http://docs.oracle.com/javase/7/docs/api/java/sql/DriverManager.html">DriverManager</a></p>

<blockquote><p>The DriverManager methods getConnection and getDrivers have been enhanced to support the Java Standard Edition <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#Service%20Provider">Service Provider</a> mechanism. JDBC 4.0 Drivers must include the file META-INF/services/java.sql.Driver. This file contains the name of the JDBC drivers implementation of java.sql.Driver. For example, to load the my.sql.Driver class, the META-INF/services/java.sql.Driver file would contain the entry:
my.sql.Driver
Applications no longer need to explicitly load JDBC drivers using <code>Class.forName()</code>. Existing programs which currently load JDBC drivers using Class.forName() will continue to work without modification.</p></blockquote>

<h3>Service Provider mechanism<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>Now let&rsquo;s dig deeper into the <strong>Service Provider mechanism</strong> and <strong>Service Provider configuration file</strong>, you can find it <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#Service%20Provider">here</a>:</p>

<p>Files in the <code>META-INF/services</code> directory are service provider configuration files. A service is a well-known set of interfaces and (usually abstract) classes. A service provider is a specific implementation of a service. The classes in a provider typically implement the interfaces and subclass the classes defined in the service itself. Service providers may be installed in an implementation of the Java platform in the form of extensions, that is, jar files placed into any of the usual extension directories. Providers may also be made available by adding them to the applet or application class path or by some other platform-specific means.</p>

<p>A service is represented by an abstract class. A provider of a given service contains one or more concrete classes that extend this service class with data and code specific to the provider. This provider class will typically not be the entire provider itself but rather a proxy that contains enough information to decide whether the provider is able to satisfy a particular request together with code that can create the actual provider on demand. The details of provider classes tend to be highly service-specific; no single class or interface could possibly unify them, so no such class has been defined. The only requirement enforced here is that provider classes must have a zero-argument constructor so that they may be instantiated during lookup.</p>

<h3>Provider-Configuration File</h3>

<p>A service provider identifies itself by placing a provider-configuration file in the resource directory <code>META-INF/services</code>. The file&rsquo;s name should consist of the fully-qualified name of the abstract service class. The file should contain a newline-separated list of unique concrete provider-class names. Space and tab characters, as well as blank lines, are ignored. The comment character is &lsquo;#&rsquo; (0x23); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.</p>

<h3>Example of Service Provider mechanism</h3>

<p>Suppose we have a service class named <code>java.io.spi.CharCodec</code>. It has two abstract methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="n">CharEncoder</span> <span class="nf">getEncoder</span><span class="o">(</span><span class="n">String</span> <span class="n">encodingName</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="n">CharDecoder</span> <span class="nf">getDecoder</span><span class="o">(</span><span class="n">String</span> <span class="n">encodingName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each method returns an appropriate object or null if it cannot translate the given encoding. Typical CharCodec providers will support more than one encoding.</p>

<p>If <code>sun.io.StandardCodec</code> is a provider of the <code>CharCodec</code> service then its jar file would contain the file <code>META-INF/services/java.io.spi.CharCodec</code>. This file would contain the single line:
<code>sun.io.StandardCodec    # Standard codecs for the platform</code>
To locate an encoder for a given encoding name, the internal I/O code would do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">CharEncoder</span> <span class="nf">getEncoder</span><span class="o">(</span><span class="n">String</span> <span class="n">encodingName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Iterator</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">Service</span><span class="o">.</span><span class="na">providers</span><span class="o">(</span><span class="n">CharCodec</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>       <span class="k">while</span> <span class="o">(</span><span class="n">ps</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">CharCodec</span> <span class="n">cc</span> <span class="o">=</span> <span class="o">(</span><span class="n">CharCodec</span><span class="o">)</span><span class="n">ps</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>           <span class="n">CharEncoder</span> <span class="n">ce</span> <span class="o">=</span> <span class="n">cc</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">(</span><span class="n">encodingName</span><span class="o">);</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">ce</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">ce</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The provider-lookup mechanism always executes in the security context of the caller. Trusted system code should typically invoke the methods in this class from within a privileged security context.</p>

<h3>How Service Provider mechanism works in JDBC</h3>

<p>Now we can draw the conclusion that with service provider configuration file, during jar loading, the loading thread will find the configuration first, then register the services by name from the configuration file. The service configuration file contains the name of the JDBC driver&rsquo;s implementation of <code>java.sql.Driver</code>. For example, to load the JDBC driver to connect to a Apache Derby database, the <code>META-INF/services/java.sql.Driver</code> file would contain the following entry:
<code>org.apache.derby.jdbc.EmbeddedDriver</code>. Then it will call <code>DriverManager.registerDriver</code> to register specific Database driver automatically, so you don&rsquo;t need to call <code>Class.forName()</code> yourself. After that, you can access the service thru <strong>Service Access Interface</strong>, <code>java.sql.DriverManager.getConnection</code> to get the service, which in this case, is a implementation of <code>java.sql.Connection</code>.</p>

<p>However, before JDBC 4.0, you don&rsquo;t have the facility, you have to register database driver manually by calling <code>Class.forName</code> to register the driver before accessing the service interface.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683">Effective Java, second edition</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#Service%20Provider">jar file specification#Service Provider</a> <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enum, EnumSet, and EnumMap Sample]]></title>
    <link href="http://puffsun.github.io/blog/2014/04/06/enum-enumset-enummap-sample/"/>
    <updated>2014-04-06T20:50:38+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/04/06/enum-enumset-enummap-sample</id>
    <content type="html"><![CDATA[<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Enum</a> was introduced in Java 1.5, although the Java enum can be used with any Java collection, its full power is best leveraged when used with the <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html">EnumSet</a>.</p>

<p>Why should you use <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html">EnumSet</a>, rather than their counterparts <a href="http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html">HashMap</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html">HashSet</a>. The primary reason boil down to performance and memory usage advantage. Let&rsquo;s see their JavaDoc firstly.</p>

<!-- more -->


<p>Document of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a>:</p>

<blockquote><p>A specialized Map implementation for use with enum type keys. All of the keys in an enum map must come from a single enum type that is specified, explicitly or implicitly, when the map is created. Enum maps are represented internally as arrays. This representation is extremely compact and efficient.
&hellip;
Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be faster than their HashMap counterparts.</p></blockquote>

<p>Document of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html">EnumSet</a>:</p>

<blockquote><p>A specialized Set implementation for use with enum types. All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. Enum sets are represented internally as bit vectors. This representation is extremely compact and efficient. The space and time performance of this class should be good enough to allow its use as a high-quality, typesafe alternative to traditional int-based &ldquo;bit flags.&rdquo; Even bulk operations (such as containsAll and retainAll) should run very quickly if their argument is also an enum set.
&hellip;
Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be much faster than their HashSet counterparts. Even bulk operations execute in constant time if their argument is also an enum set.</p></blockquote>

<p>Both of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html">EnumSet</a> belong to <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html">Java Collections Framework</a>, so they&rsquo;re easy to use because as Java developer, you should familiar with <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html">Java Collections Framework</a>; in the mean time, they&rsquo;re compact and efficient,  they&rsquo;re also enum-powered collections which are easy to use, you can see that in below sample code.</p>

<p>First, let&rsquo;s see an enum deifiniation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Weekday</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MONDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Monday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TUESDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Tuesday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">WEDNESDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Wednesday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">THURSDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Thursday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FRIDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Friday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SATURDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Saturday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SUNDAY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Sunday&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getDetail</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Weekday</span><span class="o">&gt;</span> <span class="n">WORKDAYS</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">MONDAY</span><span class="o">,</span> <span class="n">FRIDAY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">isWorkday</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">WORKDAYS</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Weekday</span><span class="o">&gt;</span> <span class="n">THE_WHOLE_WEEK</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">allOf</span><span class="o">(</span><span class="n">Weekday</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that one of interesting feature of Java enum is that you can declare <strong>abstract methods</strong>, in above example getDetail() is the abstract method and all the enum fields have implemented it. You can check some other details of Java enum <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">here</a>.</p>

<p>Let&rsquo;s move on to our sample code of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html">EnumSet</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.EnumMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">EnumSetExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Work Schedule:&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Weekday</span> <span class="n">weekday</span> <span class="o">:</span> <span class="n">Weekday</span><span class="o">.</span><span class="na">THE_WHOLE_WEEK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">action</span> <span class="o">=</span> <span class="n">weekday</span><span class="o">.</span><span class="na">isWorkday</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">?</span> <span class="s">&quot;have to work&quot;</span>
</span><span class='line'>                    <span class="o">:</span> <span class="s">&quot;can relax&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">// Enum.ordinal starts with 0</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%d. On %s you &quot;</span> <span class="o">+</span> <span class="n">action</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span><span class="o">,</span> <span class="n">weekday</span><span class="o">.</span><span class="na">ordinal</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">weekday</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Do I have to work the whole week?&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Weekday</span><span class="o">.</span><span class="na">WORKDAYS</span><span class="o">.</span><span class="na">containsAll</span><span class="o">(</span><span class="n">Weekday</span><span class="o">.</span><span class="na">THE_WHOLE_WEEK</span><span class="o">)</span>
</span><span class='line'>                <span class="o">?</span> <span class="s">&quot;Yes, unfortunately.&quot;</span>
</span><span class='line'>                <span class="o">:</span> <span class="s">&quot;Certainly not.&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">EnumSet</span><span class="o">&lt;</span><span class="n">Weekday</span><span class="o">&gt;</span> <span class="n">weekend</span> <span class="o">=</span> <span class="n">Weekday</span><span class="o">.</span><span class="na">THE_WHOLE_WEEK</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="n">weekend</span><span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="n">Weekday</span><span class="o">.</span><span class="na">WORKDAYS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;The weekend is %d days long.&quot;</span><span class="o">,</span> <span class="n">weekend</span><span class="o">.</span><span class="na">size</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// EnumMap example</span>
</span><span class='line'>        <span class="n">EnumMap</span><span class="o">&lt;</span><span class="n">Weekday</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">eMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumMap</span><span class="o">&lt;&gt;(</span><span class="n">Weekday</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Weekday</span> <span class="n">day</span> <span class="o">:</span> <span class="n">Weekday</span><span class="o">.</span><span class="na">THE_WHOLE_WEEK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">eMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">day</span><span class="o">,</span> <span class="n">day</span><span class="o">.</span><span class="na">getDetail</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Print weekdays:&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Weekday</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">eMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can run above source code by yourself, check the result then find related API of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html">EnumSet</a>. The above source code makes use of the following features in Java.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<ul>
<li>enum keyword</li>
<li>enum custom methods</li>
<li>enum toString() method</li>
<li>EnumSet#range()</li>
<li>EnumSet#allOf()</li>
<li>EnumSet#clone()</li>
<li>EnumSet#removeAll()</li>
<li>EnumSet#size()</li>
<li>EnumSet iteration</li>
<li>String#format()</li>
<li>EnumMap construction and iteration</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://weblogs.java.net/blog/mkarg/archive/2010/01/03/fun-enumset">Fun with EnumSet</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter5]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/09/scala-for-the-impatient-chapter5/"/>
    <updated>2014-03-09T20:03:35+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/09/scala-for-the-impatient-chapter5</id>
    <content type="html"><![CDATA[<p>1. Improve the Counter class in Section 5.1, “Simple Classes and Parameterless Methods,” on page 49 so that it doesn’t turn negative at <code>Int.MaxValue</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Counter</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">var</span> <span class="n">value</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">value</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&lt;</span> <span class="nc">Int</span><span class="o">.</span><span class="nc">MaxValue</span><span class="o">)</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">current</span> <span class="k">=</span> <span class="n">value</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>2. Write a class <code>BankAccount</code> with methods <code>deposit</code> and <code>withdraw</code>, and a read-only property <code>balance</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="k">private</span> <span class="k">var</span> <span class="nc">_balance</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">deposit</span><span class="o">(</span><span class="n">amount</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">_balance</span> <span class="o">+=</span> <span class="n">amount</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">withdraw</span><span class="o">(</span><span class="n">amount</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">_balance</span> <span class="o">-=</span> <span class="n">amount</span>
</span><span class='line'>      <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">balance</span> <span class="k">=</span> <span class="nc">_balance</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3. Write a class <code>Time</code> with read-only properties <code>hours</code> and <code>minutes</code> and a method <code>before(other: Time): Boolean</code> that checks whether this time comes before the other. A <code>Time</code> object should be constructed as <code>new Time(hrs, min)</code>, where hrs is in military time format (between 0 and 23).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Time</span><span class="o">(</span><span class="k">val</span> <span class="n">hours</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">val</span> <span class="n">minutes</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Validations goes here.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">hours</span> <span class="o">&gt;</span> <span class="mi">23</span> <span class="o">||</span> <span class="n">hours</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;should larger than 0 or smaller than 23&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">minutes</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">minutes</span> <span class="o">&gt;</span> <span class="mi">59</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;should larger than 0 or small than 59&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">before</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Time</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">hours</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">hours</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">minutes</span> <span class="o">&lt;</span>  <span class="n">other</span><span class="o">.</span><span class="n">minutes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4. Reimplement the Time class from the preceding exercise so that the internal representation is the number of minutes since midnight (between 0 and 24 × 60 – 1). Do not change the public interface. That is, client code should be unaffected by your change.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Time</span><span class="o">(</span><span class="k">private</span> <span class="k">val</span> <span class="nc">_hours</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">private</span> <span class="k">val</span> <span class="nc">_minutes</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">hours</span> <span class="o">&gt;</span> <span class="mi">23</span> <span class="o">||</span> <span class="n">hours</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;should larger than 0 or smaller than 23&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">minutes</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">minutes</span> <span class="o">&gt;</span> <span class="mi">59</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;should larger than 0 or small than 59&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="nc">_total_minutes</span> <span class="k">=</span> <span class="nc">_hours</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="nc">_minutes</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">minutes</span> <span class="k">=</span> <span class="nc">_minutes</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">hours</span> <span class="k">=</span> <span class="nc">_hours</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">before</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Time</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nc">_total_minutes</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="nc">_total_minutes</span><span class="o">)</span>
</span><span class='line'>      <span class="kc">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>5. Make a class <code>Student</code> with read-write JavaBeans properties name (of type <code>String</code>) and id (of type <code>Long</code>). What methods are generated? (Use javap to check.) Can you call the JavaBeans getters and setters in Scala Should you?<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.reflect.BeanProperty</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span><span class="o">(</span><span class="nd">@BeanProperty</span> <span class="k">var</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="nd">@BeanProperty</span> <span class="k">var</span> <span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Main</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">human</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="s">&quot;Dave Grohl&quot;</span><span class="o">,</span> <span class="mi">1337</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// You can call the JavaBeans getter and setter, just like this</span>
</span><span class='line'>  <span class="n">human</span><span class="o">.</span><span class="n">setName</span><span class="o">(</span><span class="s">&quot;Kurt Cobain&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">human</span><span class="o">.</span><span class="n">setId</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// But why would you, when the Scala-esque methods are generated?</span>
</span><span class='line'>  <span class="n">human</span><span class="o">.</span><span class="n">name</span> <span class="k">=</span> <span class="s">&quot;Krist Novoselic&quot;</span>
</span><span class='line'>  <span class="n">human</span><span class="o">.</span><span class="n">id</span> <span class="k">=</span> <span class="mi">5001</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of javap as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">$</span> <span class="n">javap</span> <span class="nc">Student</span>
</span><span class='line'><span class="c1">// Compiled from &quot;ch5_exercises.scala&quot;</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span> <span class="n">name</span><span class="o">();</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">void</span> <span class="n">name_$eq</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span><span class="o">);</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">void</span> <span class="n">setName</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span><span class="o">);</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">long</span> <span class="n">id</span><span class="o">();</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">void</span> <span class="n">id_$eq</span><span class="o">(</span><span class="n">long</span><span class="o">);</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">void</span> <span class="n">setId</span><span class="o">(</span><span class="n">long</span><span class="o">);</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span> <span class="n">getName</span><span class="o">();</span>
</span><span class='line'>  <span class="n">public</span> <span class="n">long</span> <span class="n">getId</span><span class="o">();</span>
</span><span class='line'>  <span class="n">public</span> <span class="nc">Student</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">String</span><span class="o">,</span> <span class="n">long</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that Scala generate getters/setters for you, as well as <code>name</code>, <code>name_=</code>, <code>id</code>, and <code>id_=</code>.</p>

<p>6. In the <code>Person</code> class of Section 5.1, “Simple Classes and Parameterless Methods,” on page 49, provide a primary constructor that turns negative ages to 0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="k">val</span> <span class="nc">_name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">var</span> <span class="nc">_age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="nc">_age</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">_age</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">age</span> <span class="k">=</span> <span class="nc">_age</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">age_=</span><span class="o">(</span><span class="n">new_age</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">new_age</span> <span class="o">&gt;</span> <span class="nc">_age</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">_age</span> <span class="k">=</span> <span class="n">new_age</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>7. Write a class <code>Person</code> with a primary constructor that accepts a string containing a first name, a space, and a last name, such as <code>new Person(&ldquo;Fred Smith&rdquo;)</code>. Supply read-only properties <code>firstName</code> and <code>lastName</code>. Should the primary constructor parameter be a var, a val, or a plain parameter? Why?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="o">(</span><span class="k">val</span> <span class="n">fullname</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">fullname</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">fullname</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">).</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Name is not be in format of first_name last_name&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">tmp_name</span> <span class="k">=</span> <span class="n">fullname</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">firstName</span> <span class="k">=</span> <span class="n">tmp_name</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">lastName</span> <span class="k">=</span> <span class="n">tmp_name</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the primary constructor parameter name suggests, it should be a val to prevent it from being changed, at the same time, it should have a public getter method so that others can get the person&rsquo;s full name.</p>

<p>8. Make a class <code>Car</code> with read-only properties for <code>manufacturer</code>, <code>model name</code>, and <code>model year</code>, and a read-write property for the <code>license plate</code>. Supply four constructors. All require the <code>manufacturer</code> and <code>model name</code>. Optionally, <code>model year</code> and <code>license plate</code> can also be specified in the constructor. If not, the <code>model year</code> is set to -1 and the <code>license plate</code> to the empty string. Which constructor are you choosing as the primary constructor? Why?</p>

<p>We only need primary constructor here, it can take default parameters, which we can leverage to eliminate the auxiliary constructor, as below code shown:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Car</span><span class="o">(</span><span class="k">val</span> <span class="n">manufacturer</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">modelName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">modelYear</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">licensePlate</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>9. Reimplement the class of the preceding exercise in Java, C#, or C++ (your choice). How much shorter is the Scala class?</p>

<p>Equivalent Java code as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">manufacturer</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">modelName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">year</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">licensePlate</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Class</span><span class="o">(</span><span class="n">String</span> <span class="n">manufacturer</span><span class="o">,</span> <span class="n">String</span> <span class="n">modelName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">modelYear</span><span class="o">,</span> <span class="n">String</span> <span class="n">licensePlate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">manufacturer</span> <span class="o">=</span> <span class="n">manufacturer</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">modelName</span> <span class="o">=</span> <span class="n">modelName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">year</span> <span class="o">=</span> <span class="n">year</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">licensePlate</span> <span class="o">=</span> <span class="n">licensePlate</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Class</span><span class="o">(</span><span class="n">String</span> <span class="n">manufacturer</span><span class="o">,</span> <span class="n">String</span> <span class="n">modelName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">(</span><span class="n">manufacturer</span><span class="o">,</span> <span class="n">modelName</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Class</span><span class="o">(</span><span class="n">String</span> <span class="n">manufacturer</span><span class="o">,</span> <span class="n">String</span> <span class="n">modelName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">modelYear</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">(</span><span class="n">manufacturer</span><span class="o">,</span> <span class="n">modelName</span><span class="o">,</span> <span class="n">modelYear</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Class</span><span class="o">(</span><span class="n">String</span> <span class="n">manufacturer</span><span class="o">,</span> <span class="n">String</span> <span class="n">modelName</span><span class="o">,</span> <span class="n">String</span> <span class="n">licensePlate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">(</span><span class="n">manufacturer</span><span class="o">,</span> <span class="n">modelName</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">licensePlate</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Getters and Setters neglected.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>10. Consider the class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Employee</span><span class="o">(</span><span class="k">val</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="k">var</span> <span class="n">salary</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="k">this</span><span class="o">()</span> <span class="o">{</span> <span class="k">this</span><span class="o">(</span><span class="s">&quot;John Q. Public&quot;</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rewrite it to use explicit fields and a default primary constructor. Which form do you prefer? Why?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Employee</span><span class="o">(</span><span class="k">val</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;John Q. Public&quot;</span><span class="o">,</span> <span class="k">var</span> <span class="n">salary</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">)</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I prefer to above code, using primary constructor with default parameters, also there&rsquo;s no explicit getters/setters. After falling love with Ruby programming language, I prefer to any coding style that can lead to concise and short code, most of time, short code is easy to maintain, to test and to develop.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://bitbucket.org/McDamon/scalaimpatient/src/4a11167459b2/ch05/answers.txt">Scala for the Impatient, by McDamon</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter4]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/08/scala-for-the-impatient-chapter4/"/>
    <updated>2014-03-08T20:49:44+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/08/scala-for-the-impatient-chapter4</id>
    <content type="html"><![CDATA[<p>1. Set up a map of prices for a number of gizmos that you covet. Then produce a second map with the same keys and the prices at a 10 percent discount.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">books</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;Scala for the Impatient&quot;</span> <span class="o">-&gt;</span> <span class="mi">30</span><span class="o">,</span> <span class="s">&quot;Ruby under a Microscope&quot;</span> <span class="o">-&gt;</span> <span class="mi">40</span><span class="o">,</span> <span class="s">&quot;Ruby Cookbook&quot;</span> <span class="o">-&gt;</span> <span class="mi">35</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">discounted</span> <span class="k">=</span> <span class="k">for</span><span class="o">((</span><span class="n">b</span><span class="o">,</span> <span class="n">p</span><span class="o">)</span> <span class="k">&lt;-</span> <span class="n">books</span><span class="o">)</span> <span class="k">yield</span> <span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">p</span> <span class="o">*</span> <span class="mf">0.9</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>2. Write a program that reads words from a file. Use a mutable map to count how often each word appears. To read the words, simply use a <code>java.util.Scanner</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="s">&quot;myfile.txt&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">in</span><span class="o">.</span><span class="n">hasNext</span><span class="o">())</span>
</span><span class='line'>  <span class="n">process</span> <span class="n">in</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or look at Chapter 9 for a Scalaesque way.
At the end, print out all words and their counts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">count_words</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">container</span> <span class="k">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">mutable</span><span class="o">.</span><span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="n">file</span><span class="o">))</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">in</span><span class="o">.</span><span class="n">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">word</span> <span class="k">=</span>  <span class="n">in</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">word</span><span class="o">))</span>
</span><span class='line'>          <span class="n">container</span><span class="o">(</span><span class="n">word</span><span class="o">)</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">container</span><span class="o">(</span><span class="n">word</span><span class="o">)</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">((</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="k">&lt;-</span> <span class="n">container</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3. Repeat the preceding exercise with an immutable map.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">count_words</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">container</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="n">file</span><span class="o">))</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">in</span><span class="o">.</span><span class="n">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">word</span> <span class="k">=</span> <span class="n">in</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
</span><span class='line'>      <span class="n">container</span> <span class="k">=</span> <span class="n">container</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">container</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or we can achieve nearly the same more Scalaesque(the result is little different, but you get the idea)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.io.Source</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">count_words</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">words</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">word</span> <span class="k">&lt;-</span> <span class="n">source</span><span class="o">.</span><span class="n">getLines</span><span class="o">.</span><span class="n">toArray</span><span class="o">)</span> <span class="k">yield</span> <span class="n">word</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">wordCounts</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">word</span> <span class="k">&lt;-</span> <span class="n">words</span><span class="o">.</span><span class="n">distinct</span><span class="o">)</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">words</span><span class="o">.</span><span class="n">count</span><span class="o">(</span><span class="k">_</span> <span class="o">==</span> <span class="n">word</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">wordCountsMap</span> <span class="k">=</span> <span class="n">wordCounts</span><span class="o">.</span><span class="n">toMap</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">wordCountsMap</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4. Repeat the preceding exercise with a sorted map, so that the words are printed in sorted order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">count_words</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">container</span> <span class="k">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="nc">SortedMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="n">file</span><span class="o">))</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">in</span><span class="o">.</span><span class="n">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">word</span> <span class="k">=</span> <span class="n">in</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
</span><span class='line'>      <span class="n">container</span> <span class="k">=</span> <span class="n">container</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">container</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>5. Repeat the preceding exercise with a <code>java.util.TreeMap</code> that you adapt to the Scala API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">count_words</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">container</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">TreeMap</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">in</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="n">file</span><span class="o">))</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">in</span><span class="o">.</span><span class="n">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">word</span> <span class="k">=</span>  <span class="n">in</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="n">containsKey</span><span class="o">(</span><span class="n">word</span><span class="o">))</span>
</span><span class='line'>          <span class="n">container</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">container</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">word</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">container</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">container</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>6. Define a linked hash map that maps &ldquo;Monday&rdquo; to <code>java.util.Calendar.MONDAY</code>, and similarly for the other weekdays. Demonstrate that the elements are visited in insertion order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">daysOfTheWeek</span> <span class="k">=</span> <span class="nc">LinkedHashMap</span><span class="o">(</span><span class="s">&quot;Monday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">MONDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Tuesday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">TUESDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Wednesday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">WEDNESDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Thursday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">THURSDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Friday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">FRIDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Saturday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">SATURDAY</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Sunday&quot;</span> <span class="o">-&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Calendar</span><span class="o">.</span><span class="nc">SUNDAY</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">daysOfTheWeek</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>7. Print a table of all Java properties, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">runtime</span><span class="o">.</span><span class="n">name</span>             <span class="o">|</span> <span class="nc">Java</span><span class="o">(</span><span class="nc">TM</span><span class="o">)</span> <span class="nc">SE</span> <span class="nc">Runtime</span> <span class="nc">Environment</span>
</span><span class='line'><span class="n">sun</span><span class="o">.</span><span class="n">boot</span><span class="o">.</span><span class="n">library</span><span class="o">.</span><span class="n">path</span>         <span class="o">|</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">apps</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">6.0</span><span class="n">_21</span><span class="o">/</span><span class="n">jre</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">i386</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">version</span>               <span class="o">|</span> <span class="mf">17.0</span><span class="o">-</span><span class="n">b16</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">vendor</span>                <span class="o">|</span> <span class="nc">Sun</span> <span class="nc">Microsystems</span> <span class="nc">Inc</span><span class="o">.</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="n">vendor</span><span class="o">.</span><span class="n">url</span>               <span class="o">|</span> <span class="n">http</span><span class="o">://</span><span class="n">java</span><span class="o">.</span><span class="n">sun</span><span class="o">.</span><span class="n">com</span><span class="o">/</span>
</span><span class='line'><span class="n">path</span><span class="o">.</span><span class="n">separator</span>                <span class="o">|</span> <span class="k">:</span>
</span><span class='line'><span class="kt">java.vm.name</span>                  <span class="kt">|</span> <span class="kt">Java</span> <span class="kt">HotSpot</span><span class="o">(</span><span class="kt">TM</span><span class="o">)</span> <span class="kt">Server</span> <span class="kt">VM</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to find the length of the longest key before you can print the table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.JavaConversions.propertiesAsScalaMap</span>
</span><span class='line'><span class="k">val</span> <span class="n">props</span><span class="k">:</span> <span class="kt">scala.collection.Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">getProperties</span>
</span><span class='line'><span class="k">val</span> <span class="n">len</span> <span class="k">=</span> <span class="n">props</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">maxBy</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">length</span><span class="o">).</span><span class="n">length</span> <span class="c1">// java.vm.specification.version</span>
</span><span class='line'><span class="k">for</span> <span class="o">((</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="k">&lt;-</span> <span class="n">props</span><span class="o">)</span> <span class="n">printf</span><span class="o">(</span><span class="s">&quot;%-&quot;</span><span class="o">+</span> <span class="n">len</span> <span class="o">+</span> <span class="s">&quot;s|%s\n&quot;</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>8. Write a function <code>min_max(values: Array[Int])</code> that returns a pair containing the smallest and largest values in the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">min_max</span><span class="o">(</span><span class="n">values</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">Tuple2</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="n">min</span><span class="o">,</span> <span class="n">values</span><span class="o">.</span><span class="n">max</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>9. Write a function lt_eq_gt(values: Array[Int], v: Int) that returns a triple containing the counts of values less than v, equal to v, and greater than v.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">lt_eg_gt</span><span class="o">(</span><span class="n">values</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">v</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Tuple3</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="n">count</span><span class="o">(</span><span class="k">_</span> <span class="o">&lt;</span> <span class="n">v</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="n">count</span><span class="o">(</span><span class="k">_</span> <span class="o">==</span> <span class="n">v</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="n">count</span><span class="o">(</span><span class="k">_</span><span class="o">&gt;</span> <span class="n">v</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>10. What happens when you zip together two strings, such as <code>&ldquo;Hello&rdquo;.zip(&ldquo;World&rdquo;)</code>? Come up with a plausible use case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// produce: scala.collection.immutable.IndexedSeq[(Char, Char)] = Vector((H,W), (e,o), (l,r), (l,l), (o,d))</span>
</span><span class='line'><span class="s">&quot;Hello&quot;</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="s">&quot;World&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>From above code we can see that the zip of two String will produce a immutable Vector, which contains Tuples. The Tuples contains a pair of characters in the same position. A possible use case is to produce a immutable map with left characters as keys and right side characters as values, you can transfer the zipped characters to a immutable map via:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">map</span> <span class="k">=</span> <span class="s">&quot;Hello&quot;</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="s">&quot;World&quot;</span><span class="o">).</span><span class="n">toMap</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://bitbucket.org/McDamon/scalaimpatient/src/4a11167459b2/ch04/answers.txt">Scala for the Impatient solutions, by McDamon</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter3]]></title>
    <link href="http://puffsun.github.io/blog/2014/03/07/scala-for-the-impatient-chapter3/"/>
    <updated>2014-03-07T23:01:32+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/03/07/scala-for-the-impatient-chapter3</id>
    <content type="html"><![CDATA[<p>In this blog post, I will continue to post the solutions to <a href="http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094">Scala for the Impatient</a>, Chapter 3 as book notes, hopes it could help if you&rsquo;re reading the book too. Without further ado, let&rsquo;s see the solutions in Scala.</p>

<p>1. Write a code snippet that sets a to an array of n random integers between 0 (inclusive) and n (exclusive).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.Random</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">random_arr</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Array</span><span class="o">.</span><span class="n">fill</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span><span class="nc">Random</span><span class="o">.</span><span class="n">nextInt</span><span class="o">(</span><span class="n">n</span><span class="o">)}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>2. Write a loop that swaps adjacent elements of an array of integers. For example, <code>Array(1, 2, 3, 4, 5)</code> becomes <code>Array(2, 1, 4, 3, 5)</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">arr</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">grouped</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Array</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Array</span><span class="o">(</span><span class="n">y</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Array</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Array</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'><span class="o">}.</span><span class="n">toArray</span>
</span></code></pre></td></tr></table></div></figure>


<p>3. Repeat the preceding assignment, but produce a new array with the swapped values. Use <code>for/yield</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">arr</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">new_arr</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">arr</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="n">arr</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>          <span class="n">arr</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">arr</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4. Given an array of integers, produce a new array that contains all positive values of the original array, in their original order, followed by all values that are zero or negative, in their original order.</p>

<p>There&rsquo;s a function called <code>partition</code> built-in into Scala by <a href="http://www.scala-lang.org/api/2.10.3/index.html#scala.collection.mutable.ArrayOps">ArrayOps</a> class, below is the implementation via <code>partition</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">arr</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mf">3.2</span><span class="o">,</span> <span class="o">-</span><span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">-</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">partition</span> <span class="o">{</span><span class="k">_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">}</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="n">_1</span> <span class="o">++</span>   <span class="n">p</span><span class="o">.</span><span class="n">_2</span>  <span class="c1">// produce Array(2.0, 9.0, 8.0, 5.0, -1.0, -3.0, -3.2, -9.0, -10.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we can also achieve without using the partition function, let&rsquo;s do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">ta</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">e</span> <span class="k">&lt;-</span> <span class="n">a</span> <span class="k">if</span> <span class="n">e</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e</span>
</span><span class='line'><span class="k">val</span> <span class="n">tb</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">e</span> <span class="k">&lt;-</span> <span class="n">a</span> <span class="k">if</span> <span class="n">e</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e</span>
</span><span class='line'><span class="n">ta</span> <span class="o">++</span> <span class="n">tb</span> <span class="c1">// produce: Array(2.0, 9.0, 8.0, 5.0, -1.0, -3.0, -3.2, -9.0, -10.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>5. How do you compute the average of an <code>Array[Double]</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">arr</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mf">3.2</span><span class="o">,</span> <span class="o">-</span><span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">-</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">sum</span> <span class="o">/</span> <span class="n">arr</span><span class="o">.</span><span class="n">size</span>
</span></code></pre></td></tr></table></div></figure>


<p>6. How do you rearrange the elements of an <code>Array[Int]</code> so that they appear in reverse sorted order? How do you do the same with an <code>ArrayBuffer[Int]</code>?</p>

<p>With array, we can sort it in reverse order by below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.Sorting</span>
</span><span class='line'><span class="k">val</span> <span class="n">arr</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mf">3.2</span><span class="o">,</span> <span class="o">-</span><span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">-</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="nc">Sorting</span><span class="o">.</span><span class="n">quickSort</span><span class="o">(</span><span class="n">are</span><span class="o">)</span> <span class="c1">// Sort the array in place</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">reverse</span>
</span></code></pre></td></tr></table></div></figure>


<p>With ArrayBuffer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">collection.mutable.ArrayBuffer</span>
</span><span class='line'><span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">ArrayBuffer</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">7</span><span class="o">)</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">sortWith</span><span class="o">(</span><span class="k">_</span><span class="o">&gt;</span><span class="k">_</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>7. Write a code snippet that produces all values from an array with duplicates removed. (Hint: Look at Scaladoc.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">arr</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">distinct</span> <span class="c1">// produce Array(1, 2, -1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>8. Rewrite the example at the end of Section 3.4, “Transforming Arrays,” on page 32. Collect indexes of the negative elements, reverse the sequence, drop the last index, and call <code>a.remove(i)</code> for each index. Compare the efficiency of this approach with the two approaches in Section 3.4.</p>

<p>We can get the same result with below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">collection.mutable.ArrayBuffer</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">ArrayBuffer</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">indexes</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">a</span><span class="o">.</span><span class="n">length</span> <span class="k">if</span> <span class="n">a</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'><span class="n">indexes</span> <span class="k">=</span> <span class="n">indexes</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'><span class="n">indexes</span><span class="o">.</span><span class="n">dropRight</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">indexes</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="n">indexes</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let see the time/space efficiency of above code. First, we use indexes to store the indexes of negative numbers, so it will take O(n) extra space. Then we traverse the original array for two times, reverse the indexes of negative numbers once, so the total time complexity will be 3 * O(n) ~ O(n)</p>

<p>9. Make a collection of all time zones returned by <code>java.util.TimeZone.getAvailableIDs</code> that are in America. Strip off the &ldquo;America/&rdquo; prefix and sort the result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">zones</span> <span class="k">=</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">TimeZone</span><span class="o">.</span><span class="n">getAvailableIDs</span><span class="o">()</span>
</span><span class='line'><span class="k">val</span> <span class="n">zones_no_prefix</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">zone</span> <span class="k">&lt;-</span> <span class="n">zones</span> <span class="k">if</span> <span class="n">zone</span><span class="o">.</span><span class="n">startsWith</span><span class="o">(</span><span class="s">&quot;America&quot;</span><span class="o">))</span> <span class="k">yield</span> <span class="n">zone</span><span class="o">.</span><span class="n">stripPrefix</span><span class="o">(</span><span class="s">&quot;America/&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">util</span><span class="o">.</span><span class="nc">Sorting</span><span class="o">.</span><span class="n">quickSort</span><span class="o">(</span><span class="n">zones_no_prefix</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another solution more in Scala way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">zones</span> <span class="k">=</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">TimeZone</span><span class="o">.</span><span class="n">getAvailableIDs</span>
</span><span class='line'><span class="k">val</span> <span class="n">zones_no_prefix</span> <span class="k">=</span> <span class="n">zones</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">startsWith</span><span class="o">(</span><span class="s">&quot;America/&quot;</span><span class="o">)).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">drop</span><span class="o">(</span><span class="s">&quot;America/&quot;</span><span class="o">.</span><span class="n">size</span><span class="o">))</span>
</span><span class='line'><span class="n">util</span><span class="o">.</span><span class="nc">Sorting</span><span class="o">.</span><span class="n">quickSort</span><span class="o">(</span><span class="n">zones_no_prefix</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>10. Import <code>java.awt.datatransfer._</code> and make an object of type <code>SystemFlavorMap</code> with the call <code>val flavors = SystemFlavorMap.getDefaultFlavorMap().asInstanceOf[SystemFlavorMap]</code>, Then call the <code>getNativesForFlavor</code> method with parameter <code>DataFlavor.imageFlavor</code> and get the return value as a Scala buffer. (Why this obscure class? It’s hard to find uses of <code>java.util.List</code> in the standard Java library.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">flavMap</span> <span class="k">=</span> <span class="nc">SystemFlavorMap</span><span class="o">.</span><span class="n">getDefaultFlavorMap</span><span class="o">().</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">SystemFlavorMap</span><span class="o">]</span>
</span><span class='line'><span class="k">val</span> <span class="n">natives</span> <span class="k">=</span> <span class="n">flavMap</span><span class="o">.</span><span class="n">getNativesForFlavor</span><span class="o">(</span><span class="nc">DataFlavor</span><span class="o">.</span><span class="n">imageFlavor</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://bitbucket.org/McDamon/scalaimpatient/src/4a11167459b2/ch03/answers.txt">Scala for the Impatient solutions, by McDamon</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differences Among Blocks, Procs, and Lambdas in Ruby]]></title>
    <link href="http://puffsun.github.io/blog/2014/02/24/blocks-procs-lambdas/"/>
    <updated>2014-02-24T22:17:52+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/02/24/blocks-procs-lambdas</id>
    <content type="html"><![CDATA[<p>Almost every Rubyist love Ruby&rsquo;s Blocks, as well as Procs and Lambdas. These features allow you to pass code to a method then execute the piece of code at a later time. In this blog post, I&rsquo;ll talk about the differences among them.</p>

<h3>Blocks</h3>

<p>A block is a piece of code passed to a method via curly braces <code>{&hellip;}</code> or <code>do&hellip;end</code>. By convention, <code>{&hellip;}</code> is used within one line of code while <code>do&hellip;end</code> for multi-line code. After passing into method, the block could be triggered later by <code>yield</code> keyword to get a return value. The <code>yield</code> keyword can accept parameters, which will be passed into the block it&rsquo;s calling at that time. Let&rsquo;s see a example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">try</span>
</span><span class='line'>  <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;no block&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Here we define a method call <code>try</code>, you can detect if a block exist with the method <code>block_given?</code>, which is defined in Kernel module. We can invoke the method <code>try</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">try</span>                               <span class="o">=&gt;</span> <span class="s2">&quot;no block&quot;</span>
</span><span class='line'><span class="n">try</span> <span class="p">{</span><span class="nb">puts</span> <span class="s2">&quot;Hey, we see a block&quot;</span><span class="p">}</span>   <span class="o">=&gt;</span> <span class="s2">&quot;Hey, we see a block&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s only a small demo, there&rsquo;re block usage in Ruby code everywhere, most programmer from other programming languages are shocked by the power of Ruby blocks, which leads to concise code.</p>

<h3>Procs</h3>

<p>A proc (Note that the proc is lowercase here) is also a piece of code, which are stored in a Proc instance. We can reuse this object any times we want. We can store a piece of code into a Proc instance, assign it to a variable, then pass it around. Let me show you another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_demo</span><span class="p">(</span><span class="n">proc_obj</span><span class="p">)</span>
</span><span class='line'>  <span class="n">proc_obj</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rather than the <code>yield</code>, we use the <code>call</code> method here to invoke the proc object passed in. Like the <code>yield</code> keyword, the <code>call</code> method can accept arguments either. We can invoke the above demo like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hey, we see a proc&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">proc_demo</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">p0</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hey, we see a proc&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">proc_demo</span><span class="p">(</span><span class="n">p0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>the code <code>proc {&hellip;}</code> is equivalent to <code>Proc.new {&hellip;}</code>, which produce a instance of Proc. You can check rdoc for further details about <a href="http://www.ruby-doc.org/core-2.1.0/Proc.html">Proc</a></p>

<h3>Lambdas</h3>

<p>The difference between a lambda and Proc instance is small. Basically there&rsquo;re two differences between them.
* A lambda checks for the number of arguments it received, and will return <code>ArgumentError</code> if the argument number don&rsquo;t match. Let&rsquo;s poke them around inside <a href="http://pryrepl.org/">pry</a>, which is alternative of irb but can do much much more:</p>

<p>First, let see the behaviour of lambda:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x007fc6a50f4560@(pry):9 (lambda)&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">17</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;George&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Hello</span><span class="p">,</span> <span class="no">George</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="ss">ArgumentError</span><span class="p">:</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">0</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">from</span> <span class="p">(</span><span class="n">pry</span><span class="p">):</span><span class="mi">9</span><span class="ss">:in</span> <span class="sb">`block in __pry__&#39;</span>
</span><span class='line'><span class="sb">[19] pry(main)&gt; l.call(&quot;George&quot;, &quot;Puff&quot;)</span>
</span><span class='line'><span class="sb">ArgumentError: wrong number of arguments (2 for 1)</span>
</span><span class='line'><span class="sb">from (pry):9:in `</span><span class="n">block</span> <span class="k">in</span> <span class="n">__pry__</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then with proc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">21</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">p</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x007fc6a4a6c5f8@(pry):14&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">22</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">p</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="no">Hello</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">23</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;George&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Hello</span> <span class="no">George</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">[</span><span class="mi">24</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;George&quot;</span><span class="p">,</span> <span class="s2">&quot;Puff&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Hello</span> <span class="no">George</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference of processing the incoming arguments is pretty clear with above example.</p>

<p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>Another difference is that lambda provide diminutive returns, which means when a Proc encounters a return statement during it&rsquo;s execution, it halts the enclosing method then return the provided value. Lambdas, on the other hand, return the value to the method, then return to the enclosing method, continue the program execution. This means procs behave more like a piece of code, while lambdas more like a method, you can take advantage of them of your own.</p>

<p>If you still not clear about the differences among them, I recommand you to read the excellent book <a href="http://www.amazon.com/Metaprogramming-Ruby-Program-Like-Pros/dp/1934356476">Metaprogramming Ruby</a>, check the book comments on Amazon.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://code.tutsplus.com/tutorials/ruby-on-rails-study-guide-blocks-procs-and-lambdas--net-29811">Ruby on Rails Study Guide: Blocks, Procs, and Lambdas</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions to Scala for the Impatient - Chapter1 and Chapter2]]></title>
    <link href="http://puffsun.github.io/blog/2014/02/24/scala-for-the-impatient-solutions-ch1-and-ch2/"/>
    <updated>2014-02-24T20:09:58+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/02/24/scala-for-the-impatient-solutions-ch1-and-ch2</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;m reading the book <a href="http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094">Scala for the Impatient</a>, the book is pretty brilliant, you can see that from the comments. Since I&rsquo;m a newbie to Scala, I&rsquo;m try to complete the exercises after every chapter, I post the solutions in a serious of blog posts as book notes.</p>

<p>Since both chapter 1 and chapter 2 are very simple, I&rsquo;ll post the solutions together here with this blog post.</p>

<!--more-->


<h3>Solutions to exercises of Chapter 1</h3>

<p>8. One way to create random file or directory names is to produce a random BigInt and convert it to base 36, yielding a string such as &ldquo;qsnvbevtomcj38o06kul&rdquo;. Poke around Scaladoc to find a way of doing this in Scala.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">tmp</span> <span class="k">=</span> <span class="nc">BigInt</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="n">util</span><span class="o">.</span><span class="nc">Random</span><span class="o">).</span><span class="n">toString</span><span class="o">(</span><span class="mi">36</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to <a href="http://www.scala-lang.org/api/2.10.2/index.html#scala.math.BigInt$">BigInt&rsquo;s document</a>, there&rsquo;s a method called apply, which will construct a randomly generated BigInt, uniformly distributed over the range 0 to (2 ^ numBits &ndash; 1), its method signature is <code> def apply(numbits: Int, rnd: Random): BigInt </code>.</p>

<p>9. How do you get the first character of a string in Scala? The last character?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">str</span> <span class="k">=</span> <span class="s">&quot;abcd&quot;</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">head</span> <span class="c1">// get the first</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">dropRight</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;re several way to achieve this goal, what I have shown is one of them.</p>

<p>10. What do the take, drop, takeRight, and dropRight string functions do? What advantage or disadvantage do they have over using substring?
To get an idea what they can do, we need to check Scala document.</p>

<p>The difference between then and java.lang.String is that, before Java 7, String#substring method will operate on the original string, it will generate new String instance at all, so it takes constant time to complete the substring operation. But this behaviour changed after Java 7 due to security reasons, for more details, please go to <a href="http://www.javaadvent.com/2012/12/changes-to-stringsubstring-in-java-7.html">Changes to String.substring in Java 7</a>. After this change, substring will always produce new String instances, which will take linear time to complete the operation.</p>

<p>As far as I know, in Scala, the take* and drop* method will always generate new String instances(please correct me if I&rsquo;m wrong), I think this is the difference.</p>

<h3>Solutions to exercises of Chapter 2</h3>

<p>1. The signum of a number is 1 if the number is positive, –1 if it is negative, and 0 if it is zero. Write a function that computes this value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">signum</span><span class="o">(</span><span class="n">num</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">1</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that I didn&rsquo;t use return statement in above code, it a best practice to avoid the return statement in Scala.</p>

<p>2. What is the value of an empty block expression {}? What is its type?
It&rsquo;s of type Unit, you can verify that with <code> {}.getClass </code> inside Scala interactive shell.</p>

<p>3. Come up with one situation where the assignment x = y = 1 is valid in Scala. (Hint: Pick a suitable type for x.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">Unit</span>
</span><span class='line'><span class="k">var</span> <span class="n">y</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">x</span> <span class="k">=</span> <span class="n">y</span> <span class="k">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.Write a Scala equivalent for the Java loop <code>for (int i = 10; i >= 0; i&mdash;) System.out.println(i); </code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">10</span> <span class="n">to</span> <span class="mi">0</span> <span class="n">by</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>5. Write a procedure countdown(n: Int) that prints the numbers from n to 0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">countdown</span><span class="o">(</span><span class="n">num</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">step</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">num</span> <span class="n">to</span> <span class="mi">0</span> <span class="n">by</span> <span class="n">step</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>6. Write a for loop for computing the product of the Unicode codes of all letters in a string. For example, the product of the characters in &ldquo;Hello&rdquo; is 9415087488L.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">var</span> <span class="n">prod</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="s">&quot;Hello&quot;</span><span class="o">)</span> <span class="n">println</span><span class="o">(</span><span class="n">prod</span> <span class="o">*</span> <span class="n">i</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>7. Solve the preceding exercise without writing a loop. (Hint: Look at the StringOps Scaladoc.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="s">&quot;Hello&quot;</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">1L</span><span class="o">)</span> <span class="o">(</span><span class="k">_</span> <span class="o">*</span> <span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that here I use 1L instead of 1, because java.lang.Integer.MAX_VALUE is 2147483647, which is too small to hold the produce of products of &ldquo;Hello&rdquo;, so I need to specify Long as the products type.</p>

<p>8. Write a function product(s : String) that computes the product, as described in the preceding exercises.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">product</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="mi">1L</span><span class="o">)</span> <span class="o">(</span><span class="k">_</span> <span class="o">*</span> <span class="k">_</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>9. Make the function of the preceding exercise a recursive function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">product_r</span><span class="o">(</span><span class="n">str</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">str</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;&quot;</span> <span class="k">=&gt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">str</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">toInt</span> <span class="o">*</span> <span class="n">product_r</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we still specify the return value as Long for the same reason above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Threading With Monitor in Ruby]]></title>
    <link href="http://puffsun.github.io/blog/2014/01/25/threading-with-monitor-in-ruby/"/>
    <updated>2014-01-25T00:45:07+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/01/25/threading-with-monitor-in-ruby</id>
    <content type="html"><![CDATA[<p>Write multi-threaded program is pretty straightforward in Ruby, there&rsquo;s a Thread class that help to achieve parallelism code. If you didn&rsquo;t know thread or don&rsquo;t know how to write multi-threaded code in Ruby, I encourage you stop reading this blog post, move to this brilliant tutorial <a href="http://www.tutorialspoint.com/ruby/ruby_multithreading.htm">Ruby Multithreading</a> to learn the basics of the Thread in Ruby.</p>

<p>Well, this blog post will show you how to make your life easier as a Ruby developer when you faced with multi-threading &mdash; the MonitorMixin library, it&rsquo;s one of my favourite libraries. It make the task of writing complex synchronisation logic easy which is hard to write using a simple exclusive locking mechanism. MonitorMixin lets you write a nested lock, so you can use it as a more convenient version of plain old Mutex.</p>

<p>Let&rsquo;s see an example with deadlock, then we resolve it with MonitorMixin library.</p>

<!--more-->


<p>Here&rsquo;s the defected code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;thread&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@serial</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="c1"># Exclusive mutex instance</span>
</span><span class='line'>    <span class="vi">@mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># No need to synchronize here because we only read value here</span>
</span><span class='line'>    <span class="c1"># But keep in mind that in Ruby you can redefine method,</span>
</span><span class='line'>    <span class="c1"># so this method may not behave as it should be.</span>
</span><span class='line'>    <span class="vi">@items</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Deadlock happens here.</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="n">serial</span>
</span><span class='line'>      <span class="vi">@items</span><span class="o">[</span><span class="vi">@key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">key</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@items</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_todos</span>
</span><span class='line'>    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@items</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="o">[</span><span class="n">item</span><span class="p">,</span> <span class="vi">@items</span><span class="o">[</span><span class="n">item</span><span class="o">]]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Generate next serial number</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">serial</span>
</span><span class='line'>    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@serial</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="vi">@serial</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try it in interactive Ruby, note that I use <a href="http://pryrepl.org/">Pry</a> as replacement of plain old irb, you should give it a try too, it&rsquo;s pretty powerful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">30</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">require_relative</span> <span class="s1">&#39;deadlock_example&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">31</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Todo:0x007f866977fb90 @items={}, @mutex=#&lt;Mutex:0x007f866977fb40&gt;, @serial=0&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">32</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">todo</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Item 1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="ss">ThreadError</span><span class="p">:</span> <span class="n">deadlock</span><span class="p">;</span> <span class="n">recursive</span> <span class="n">locking</span>
</span><span class='line'><span class="n">from</span> <span class="sr">/Users/</span><span class="n">gsun</span><span class="o">/</span><span class="n">prog</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">george</span><span class="o">/</span><span class="n">deadlock_example</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">39</span><span class="ss">:in</span> <span class="sb">`synchronize&#39;</span>
</span><span class='line'><span class="sb">[33] pry(main)&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure enough, we have a deadlock on our hands. These types of bugs can be difficult to track down in real life programming.</p>

<p>Now let&rsquo;s see how to use MonitorMixin to enable nested lock, above example was refactored like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;monitor&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">MonitorMixin</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="c1"># Remember to call super in constructor to initialize MonitorMixin</span>
</span><span class='line'>    <span class="c1"># Also no need the @mutex instance at all</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@serial</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># No need to synchronize here because we only read value here</span>
</span><span class='line'>    <span class="c1"># But keep in mind that in Ruby you can redefine method,</span>
</span><span class='line'>    <span class="c1"># so this method may not behavior as it should be.</span>
</span><span class='line'>    <span class="vi">@items</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Deadlock happens here.</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="n">serial</span>
</span><span class='line'>      <span class="vi">@items</span><span class="o">[</span><span class="vi">@key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">key</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@items</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_todos</span>
</span><span class='line'>    <span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@items</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="o">[</span><span class="n">item</span><span class="p">,</span> <span class="vi">@items</span><span class="o">[</span><span class="n">item</span><span class="o">]]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Generate next serial number</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">serial</span>
</span><span class='line'>    <span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@serial</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="vi">@serial</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s try it in Pry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">require_relative</span> <span class="s1">&#39;example&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Todo:0x007ff1f2a30a98</span>
</span><span class='line'> <span class="vi">@items</span><span class="o">=</span><span class="p">{},</span>
</span><span class='line'> <span class="vi">@mon_count</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@mon_mutex</span><span class="o">=</span><span class="c1">#&lt;Mutex:0x007ff1f2a30a48&gt;,</span>
</span><span class='line'> <span class="vi">@mon_owner</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@serial</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">todo</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Item 1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The deadlock is gone since the synchronize method can handle nested locks, you don&rsquo;t have to worry about having a deadlock, unlike the Mutex version. If you know Java, you can see the synchronize method is similar to the synchronized keyword in Java.</p>

<p>The moral is that we should consider MonitorMixin library for every case that need synchronize, even the simplest one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bindings in Ruby]]></title>
    <link href="http://puffsun.github.io/blog/2014/01/24/bindings-in-ruby/"/>
    <updated>2014-01-24T14:43:40+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/01/24/bindings-in-ruby</id>
    <content type="html"><![CDATA[<h3>Binding overview</h3>

<p>In Ruby, bindings can be made available by calling binding method, which is a Kernel method that returns Binding object. Let&rsquo;s see the <a href="http://www.ruby-doc.org/core-2.1.0/Binding.html">rdoc</a> of Binding object:</p>

<blockquote><p>Objects of class Binding encapsulate the execution context at some particular place in the code and retain this context for future use. The variables, methods, value of self, and possibly an iterator block that can be accessed in this context are all retained. Binding objects can be created using Kernel#binding, and are made available to the callback of Kernel#set_trace_func. These binding objects can be passed as the second argument of the Kernel#eval method, establishing an environment for the evaluation.</p></blockquote>

<!--more-->


<p>Like rdoc said, with bindings, mostly you can do is pass it as a second parameter to Kernel#eval, Ruby will use the binding to resolve open variable references by evaluating a string, other than that, bindings are pretty opaque.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Demo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_binding</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">binding</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">k1</span> <span class="o">=</span> <span class="no">Demo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">99</span><span class="p">)</span>
</span><span class='line'><span class="n">b1</span> <span class="o">=</span> <span class="n">k1</span><span class="o">.</span><span class="n">get_binding</span>
</span><span class='line'><span class="n">k2</span> <span class="o">=</span> <span class="no">Demo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">b2</span> <span class="o">=</span> <span class="n">k2</span><span class="o">.</span><span class="n">get_binding</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;@secret&quot;</span><span class="p">,</span> <span class="n">b1</span><span class="p">)</span>   <span class="c1">#=&gt; 99</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;@secret&quot;</span><span class="p">,</span> <span class="n">b2</span><span class="p">)</span>   <span class="c1">#=&gt; -3</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;@secret&quot;</span><span class="p">)</span>       <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;a = 101&quot;</span><span class="p">,</span> <span class="n">b1</span><span class="p">)</span>   <span class="c1">#Bind &#39;a&#39; to 101</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Binding in practise</h3>

<h4>Local Scope Bindings</h4>

<p>With Binding object along with Kernel#binding method, we can capture the variable bindings available at a particular point in the execution context, then pass the binding to another place for further reference, let&rsquo;s see an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">value_of</span><span class="p">(</span><span class="n">bind</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="n">bind</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_scope</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>    <span class="n">value_of</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">my_scope</span>               <span class="c1"># =&gt; 33</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bindings can be returned from a function as well. This example shows that a binding continues to exist after the function that defines the binding has exited<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">func</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="mi">22</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="mi">33</span>
</span><span class='line'>  <span class="nb">binding</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">func_vars</span> <span class="o">=</span> <span class="n">func</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="n">func_vars</span>         <span class="c1"># =&gt; 22</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="n">func_vars</span>         <span class="c1"># =&gt; 33</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;a = 101&quot;</span><span class="p">,</span> <span class="n">func_vars</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="n">func_vars</span>         <span class="c1"># =&gt; 101</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bizarre feature of this example shows that not only does binding persist beyond the scope of the function that created them, but that you can modify these bindings just by evaluating an assignment within their context.</p>

<h4>Blocks and Bindings</h4>

<p>A block in Ruby is a chunk of code that can be called like a function. The block automatically carries with it the bindings from the code location where it was created. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="mi">33</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="n">a</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">redefine_a</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">44</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">redefine_a</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>      <span class="c1"># =&gt; 33</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block returns the value of a in the binding where the block was defined (a == 33), not the binding where the block was called (a == 44).</p>

<p>This combination of code block and binding is called a closure, and is a very powerful tool in a Ruby programmers toolbox.</p>

<h4><a href="http://en.wikipedia.org/wiki/ERuby">ERuby</a> and Bindings</h4>

<p>ERuby stands for Embened Ruby, it&rsquo;s a templating system that used to embed Ruby code into text document. One of it&rsquo;s implementation in Ruby is called erb. With erb, you can write your template like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;&lt;%= @title %&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later, you can evaluate the template with Ruby code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@title</span> <span class="o">=</span> <span class="s2">&quot;The web and all that jazz&quot;</span>
</span><span class='line'><span class="n">erb</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">erb</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the binding call in the last line of code snippet, it pass in current execution context, which contains the @title variable definition. If we call erg like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">erb</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby will assumes that the binding as TOPLEVEL_BINDING, which is not what we want obviously.</p>

<h4>Bindings for everyday use</h4>

<p>Here I&rsquo;ll show you how to use binding to do quick debugging, first of all, we open the Array class, add a debug method<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">debug</span> <span class="nb">binding</span>
</span><span class='line'>    <span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;arg = </span><span class="si">#{</span><span class="nb">eval</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="nb">binding</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use this method to inspect a list of snippets of Ruby code to see what each snippet returns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="p">,</span><span class="s1">&#39;current_resource&#39;</span><span class="p">,</span> <span class="s1">&#39;user.owns?(current_resource)&#39;</span><span class="o">].</span><span class="n">debug</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep mind that each element in the array will be evaluated as Ruby code, then return the execution result of the code snippet. In this example, the current execution context was captured by calling Kernel#binding method, then these code snippet was execution in the context that binding method captured.</p>

<h3>Conclusion</h3>

<p>Being able to pass around binding lead to very powerful Ruby code under certain circumstances. Someone would say that passing around execution context could violate encapsulation, but in my opinion, it&rsquo;s ok to break some rules once a while, at least Ruby give the power of breaking rule to you, a programmer. Not even to say one of most powerful features in Ruby that comes along with Binding: Closure.</p>

<p>Resources:
<a href="http://webjazz.blogspot.com/2006/07/introduction-to-bindings-in-ruby.html">Introduction to Bindings in Ruby</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://onestepback.org/index.cgi/Tech/Ruby/RubyBindings.rdoc">Variable Bindings in Ruby</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>http://stackoverflow.com/questions/1605774/real-world-use-of-binding-objects-in-ruby<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Design Patterns]]></title>
    <link href="http://puffsun.github.io/blog/2014/01/23/ruby-design-patterns/"/>
    <updated>2014-01-23T13:27:14+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/01/23/ruby-design-patterns</id>
    <content type="html"><![CDATA[<p>I just finished reading the great book <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Design Patterns in Ruby</a>. Actually just like me, most of developers know Design Patterns well, what I want to learn from the book is Design Patterns in Ruby style, there is a saying: <em>Just because you have duck-typing doesn&rsquo;t mean you can ignore common OO idioms!</em></p>

<p>In this blog post, I&rsquo;m going to show you how to implement common design patterns in Ruby, without further ado, let&rsquo;s get started!</p>

<h4>Factory</h4>

<p>The classic implementation in the book <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1390451541&amp;sr=1-1&amp;keywords=design+patterns">Design Patterns: Elements of Reusable Object-Oriented Software</a> is inheriance-based, this kind of style is hard to find in Ruby code, Ruby programmers are more prefer to more dynamic version, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span>
</span><span class='line'>  <span class="c1">#..</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Factory</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:product</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">produce</span>
</span><span class='line'>    <span class="vi">@product</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fac</span> <span class="o">=</span> <span class="no">Factory</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">fac</span><span class="o">.</span><span class="n">product</span> <span class="o">=</span> <span class="no">Product</span>
</span><span class='line'><span class="n">fac</span><span class="o">.</span><span class="n">produce</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h4>Builder</h4>

<p>Ruby&rsquo;s build method is more dynamic, like the code shown:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Director</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build_with</span> <span class="n">builder</span>
</span><span class='line'>  <span class="n">acc</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="o">[</span><span class="ss">:header</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:footer</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="n">acc</span> <span class="o">+=</span> <span class="n">builder</span><span class="o">.</span><span class="n">__send__</span> <span class="n">m</span> <span class="k">if</span> <span class="n">builder</span><span class="o">.</span><span class="n">respond_to?</span> <span class="n">m</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">acc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HTMLBuilder</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">header</span><span class="p">;</span> <span class="s1">&#39;&lt;html&gt;&lt;title&gt;html builder&lt;/title&gt;&#39;</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span><span class="p">;</span>   <span class="s1">&#39;&lt;body&gt;html builder&lt;/body&gt;&#39;</span>        <span class="p">;</span><span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">footer</span><span class="p">;</span> <span class="s1">&#39;&lt;/html&gt;&#39;</span>                          <span class="p">;</span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">XMLBuilder</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">header</span><span class="p">;</span> <span class="s1">&#39;&lt;?xml version=&quot;1.0&quot; charset=&quot;utf-8&quot;&gt;&#39;</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span><span class="p">;</span>   <span class="s1">&#39;&lt;root&gt;xml builder&lt;/root&gt;&#39;</span>            <span class="p">;</span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="no">Director</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">build_with</span> <span class="no">HTMLBuilder</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">build_with</span> <span class="no">XMLBuilder</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fun part is that above code will check the method signature, if the object we want to build don&rsquo;t need specify part, we could leave the method unimplemented that&rsquo;s ok to Ruby.</p>

<h4>Adapter</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Adaptee</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">talk</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;Adaptee&#39;</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Adapter</span> <span class="o">&lt;</span> <span class="no">Adaptee</span>
</span><span class='line'>  <span class="k">alias</span> <span class="n">talkee</span> <span class="n">talk</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">talk</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;before Adaptee&#39;</span>
</span><span class='line'>  <span class="n">talkee</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;after Adaptee&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Adapter</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">talk</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Composite</h4>

<p>I&rsquo;m totally agree with the point that the Composite pattern is built into Ruby with the include keyword. As you know, with composite pattern, there&rsquo;re two concepts: Whole and Parts. In Ruby, you can imagine the the whole is the Mixiner, while the part is the Mixinee.</p>

<h4>Decorator</h4>

<p>This is another demonstration of Ruby&rsquo;s power, it built with a lot of proved best practice. In Ruby, you can implement Decorator pattern by extending modules, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Colorful</span>
</span><span class='line'>  <span class="n">attr_acessor</span> <span class="ss">:color</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Widget</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">w</span> <span class="o">=</span> <span class="no">Widget</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span> <span class="c1">#NoMethod error</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">extend</span> <span class="no">Colorful</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">w</span><span class="o">.</span><span class="n">color</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Proxy</h4>

<p>Just like adapter, you can implement Proxy pattern by delegating its interface to another instance. But keep in mind the difference of Proxy and Adapter, with Proxy, you should not change interface, you can use Proxy pattern for caching purpose or for security reasons, just keep interface the same to its subject; but with Adapter pattern, you can transform the interface of the inner object.</p>

<h4>Command</h4>

<p>In Ruby, you can implement Command pattern leverage code blocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Command</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@executors</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_executor</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>  <span class="vi">@executors</span> <span class="o">&lt;&lt;</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>  <span class="vi">@executors</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="no">Command</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">add_executor</span><span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;executor 1&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">add_executor</span><span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;executor 2&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">execute</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Template method</h4>

<p>Here is code snippet quoted from the book:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;webrick&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloServer</span> <span class="o">&lt;</span> <span class="ss">WEBrick</span><span class="p">:</span><span class="ss">:GenericServer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
</span><span class='line'>    <span class="n">socket</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s1">&#39;Hello TCP/IP world&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;a simple HTTP server implementation, WEBrick library complete most of heavy lift, like listening on a port, accepting new connections, cleaning up when a connection is finished etc.. What we do is to provide HTTP response content, that&rsquo;s the beauty of Template method.</p>

<h4>Singleton</h4>

<p>In Ruby, Singleton is as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">SingletonClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>  <span class="c1"># methods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>or you can leverage the built-in standard library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SingletonLogger</span> <span class="o">&lt;</span> <span class="no">SimpleLogger</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>  <span class="c1"># Logger implementation details.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;re still some patterns that I didn&rsquo;t cover, but perhaps you have got the idea that Ruby has many design patterns built into it in the first place. As a saying that &ldquo;design patterns are usually a flaw in the language/framework&rdquo;, although I doubted that argue, apparently Ruby is not in that place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.1 New Features]]></title>
    <link href="http://puffsun.github.io/blog/2014/01/23/ruby-21-new-features/"/>
    <updated>2014-01-23T11:22:29+08:00</updated>
    <id>http://puffsun.github.io/blog/2014/01/23/ruby-21-new-features</id>
    <content type="html"><![CDATA[<p>Ruby 2.1 has been released several days before. It brought a number of optimisations as well as smaller and useful features. In this article, I will go through several very welcoming features, without further ado, let&rsquo;s move on to the world of Ruby 2.1.</p>

<h3>Installing Ruby 2.1</h3>

<p>If you&rsquo;re on rvm(run <code>rvm get head</code> to get 2.1.0):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm get head
</span><span class='line'><span class="nv">$ </span>rvm install ruby-2.1.0
</span><span class='line'><span class="nv">$ </span>rvm use ruby-2.1.0
</span></code></pre></td></tr></table></div></figure>


<p>Or if you like me, using <code>rbenv</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.1.0
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span><span class='line'><span class="nv">$ </span>rbenv shell 2.1.0
</span></code></pre></td></tr></table></div></figure>


<p>To make sure you&rsquo;re using the newly installed Ruby, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby -v
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>New features that we&rsquo;ll talk about</h3>

<p>For complete release notes, go ahead to <a href="https://github.com/ruby/ruby/blob/v2_1_0/NEWS">https://github.com/ruby/ruby/blob/v2_1_0/NEWS</a>. Below is the list of features we&rsquo;ll talk about.</p>

<ol>
<li>Required Keyword Arguments</li>
<li>Rational and Complex Number Literals</li>
<li>def-expr Now Return Value</li>
<li>Array#to_h &amp; Enumerable#to_h</li>
<li>Exception#cause</li>
<li>Generational GC a.k.a RGenGC</li>
<li>Refinements</li>
<li>Object Allocation Tracing</li>
<li>Scrubbing Strings</li>
</ol>


<hr />

<h5>1. Required Keyword Arguments</h5>

<p>In previous Ruby 2.0 release, it introduced keyword arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;a: </span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the keyword always require a default value, which you avoid in Ruby 2.1 by using required keyword arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="ss">a</span><span class="p">:)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;a: </span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2. Rational and Complex Number Literals</h5>

<p>Ruby 2.1 introduced the i <code>i</code> suffix to support Complex numbers, also the <code>r</code>suffix to support Rational numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:015:0&gt; 10+3i + Complex<span class="o">(</span>5, 6i<span class="o">)</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">(</span>9+3i<span class="o">)</span>
</span><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:014:0&gt; 10/3r
</span><span class='line'><span class="o">=</span>&gt; <span class="o">(</span>10/3<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3. def-expr Now Return Value</h5>

<p>In previous versions of Ruby, the return value of a method definition has always been nil, now in version 2.1, the return value of def expression is the Symbol of the method name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:016:0&gt; def foo
</span><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:017:1&gt; <span class="nv">end</span>
</span><span class='line'><span class="o">=</span>&gt; :foo
</span></code></pre></td></tr></table></div></figure>


<p>The idea was to allow inlining of private/protected/public keywords and method definitions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="k">def</span> <span class="nf">some_other_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="k">def</span> <span class="nf">a_private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>4. Array#to_h &amp; Enumerable#to_h</h5>

<p>Previously if you want convert an Array object to Hash object, you should do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:023:0&gt; <span class="nv">my_array</span> <span class="o">=</span> <span class="o">[[</span>:key1, <span class="s2">&quot;one&quot;</span><span class="o">]</span>, <span class="o">[</span>:key2, <span class="s2">&quot;two&quot;</span><span class="o">]</span>, <span class="o">[</span>:key3, <span class="s2">&quot;three&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">[[</span>:key1, <span class="s2">&quot;one&quot;</span><span class="o">]</span>, <span class="o">[</span>:key2, <span class="s2">&quot;two&quot;</span><span class="o">]</span>, <span class="o">[</span>:key3, <span class="s2">&quot;three&quot;</span><span class="o">]]</span>
</span><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:024:0&gt; Hash<span class="o">[</span>*my_array.flatten<span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">{</span>:key1<span class="o">=</span>&gt;<span class="s2">&quot;one&quot;</span>, :key2<span class="o">=</span>&gt;<span class="s2">&quot;two&quot;</span>, :key3<span class="o">=</span>&gt;<span class="s2">&quot;three&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a bit tedious, now with Ruby 2.1, you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>my_array.to_h
</span><span class='line'><span class="o">=</span>&gt; <span class="o">{</span>:key1<span class="o">=</span>&gt;<span class="s2">&quot;one&quot;</span>, :key2<span class="o">=</span>&gt;<span class="s2">&quot;two&quot;</span>, :key3<span class="o">=</span>&gt;<span class="s2">&quot;three&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s much more simple.</p>

<h5>5. Exception#cause</h5>

<p>Sometimes when rescuing an exception in Ruby, it’s useful to handle the error scenario by raising another, different exception. The trouble with this technique is that it throws away all the information held by the original exception. This makes debugging harder, as there’s no stack trace to follow back to the root cause of the failure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Error A&quot;</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Error B&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Current failure: </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Original failure:  </span><span class="si">#{</span><span class="n">error</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># &gt;&gt; Current failure: #&lt;RuntimeError: Error B&gt;</span>
</span><span class='line'><span class="c1"># &gt;&gt; Original failure:  #&lt;RuntimeError: Error A&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For detailed explanation, go ahead to <a href="http://devblog.avdi.org/2013/12/25/exception-causes-in-ruby-2-1/">http://devblog.avdi.org/2013/12/25/exception-causes-in-ruby-2-1/</a>.</p>

<h5>6. Generational GC a.k.a RGenGC</h5>

<p>Now almost every programmer knows GC, thanks to Java. In more traditional programming languages, like C/C++, you must manually free resources when you finish using them, this make the program more error prone, also put a huge burden onto programmer.</p>

<p>RGenGC is a new garbage collector known as a <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Generational_GC_.28ephemeral_GC.29">generational garbage collector</a>, sometimes referred to as an ephemeral garbage collector. This design of garbage collector leverages the fact that most objects collected by the garbage collector were the objects most recently created. In other words, most objects being collected by the garbage collector were temporary objects, used for a short period in a single method and discarded. Generational garbage collectors collect these objects more effectively, putting less strain on the GC when it searches through the older objects to find unreferenced objects.</p>

<p>Prior to Ruby 2.1, Ruby’s garbage collector was running a conservative stop-the-world mark and sweep algorithm. In Ruby 2.1, we are still using the mark and sweep algorithm to garbage collect the young/old generations. However, because we have lesser objects to mark the marking time decreases, which leads to improved collector performance.</p>

<p>There are caveats, however. In order to preserve compatibility with C extensions, the Ruby core team could not implement a “full” generational garbage collection algorithm. In particular, they could not implement the <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Moving_vs._non-moving">moving garbage collection algorithm</a> – hence the “restricted”.</p>

<p>That said, it is very encouraging to see the Ruby core team taking garbage collection performance very seriously. For more details, do check out <a href="http://confreaks.com/videos/2866-rubyconf2013-object-management-on-ruby-2-1">this</a> excellent presentation by Koichi Sasada.</p>

<h5>7. Refinements</h5>

<p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>Refinements are no longer experimental in Ruby 2.1. If you are new to refinements, it helps to compare it to monkey patching. In Ruby, all classes are open. This means that we can happily add methods to an existing class.</p>

<p>To appreciate the havoc this can cause, let’s redefine String#count</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">count</span>
</span><span class='line'>    <span class="nb">Float</span><span class="o">::</span><span class="no">INFINITY</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you were to paste the above into irb, every string returns Infinity when count-ed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:001:0&gt; <span class="s2">&quot;I &lt;3 Monkey Patching&quot;</span>.count
</span><span class='line'><span class="o">=</span>&gt; Infinity
</span></code></pre></td></tr></table></div></figure>


<p>Refinements provide an alternate way to scope our modifications. Let’s make something slightly more useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Permalinker</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">permalinkify</span>
</span><span class='line'>      <span class="n">downcase</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">Permalinker</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">permalink</span>
</span><span class='line'>    <span class="vi">@title</span><span class="o">.</span><span class="n">permalinkify</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we define a module, Permalinker that refines the String class with a new method. This method implements a cutting edge permalink algorithm.</p>

<p>In order to use our refinement, we simply add using Permalinker into our example Post class. After that, we could treat as if the String class has the permalinkify method.</p>

<p>Let’s see this in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:002:0&gt; <span class="nv">post</span> <span class="o">=</span> Post.new<span class="o">(</span><span class="s2">&quot;Refinements are pretty awesome&quot;</span><span class="o">)</span>
</span><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:002:0&gt; post.permalink
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;refinements-are-pretty-awesome&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To prove that String#permalinkify only exists within the scope of the Post class, let’s try using that method elsewhere and watch the code blow up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:023:0&gt; <span class="s2">&quot;Refinements are not globally scoped&quot;</span>.permalinkify
</span><span class='line'>NoMethodError: undefined method <span class="sb">`</span>permalinkify<span class="s1">&#39; for &quot;Refinements are not globally scoped&quot;:String</span>
</span><span class='line'><span class="s1">        from (irb):23</span>
</span><span class='line'><span class="s1">        from /usr/local/var/rbenv/versions/2.1.0/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>8. Object Allocation Tracing</h5>

<p>If you have a bloated Ruby application, it is usually a non-trivial task to pinpoint the exact source of the problem. MRI Ruby still doesn’t have profiling tools that can rival, for example, the <a href="https://github.com/jruby/jruby/wiki/Profiling-Object-Allocations">JRuby profiler</a>.</p>

<p>Fortunately, work has begun to provide object allocation tracing to MRI Ruby.</p>

<p>Here’s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;objspace&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tags</span>
</span><span class='line'>    <span class="sx">%w(ruby programming code)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">trace_object_allocations_start</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">trace_object_allocations_stop</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_sourcefile</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># post.rb</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_sourceline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># 16</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_class_path</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># Class</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_method_id</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>  <span class="c1"># new</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_sourcefile</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># post.rb</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_sourceline</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># 9</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_class_path</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># Array</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">allocation_method_id</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>  <span class="c1"># map</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although knowing that we can obtain this information is great, it is not immediately obvious how this could be useful to you, the developer.</p>

<p>Enter the allocation_stats gem written by Sam Rawlins.</p>

<p>Let’s install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install allocation_stats
</span><span class='line'>Fetching: allocation_stats-0.1.2.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Successfully installed allocation_stats-0.1.2
</span><span class='line'>Parsing documentation <span class="k">for </span>allocation_stats-0.1.2
</span><span class='line'>Installing ri documentation <span class="k">for </span>allocation_stats-0.1.2
</span><span class='line'>Done installing documentation <span class="k">for </span>allocation_stats after 0 seconds
</span><span class='line'>1 gem installed
</span></code></pre></td></tr></table></div></figure>


<p>Here’s the same example as before, except that we are using allocation_stats this time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;allocation_stats&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tags</span>
</span><span class='line'>    <span class="sx">%w(ruby programming code)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">stats</span> <span class="o">=</span> <span class="no">AllocationStats</span><span class="o">.</span><span class="n">trace</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">stats</span><span class="o">.</span><span class="n">allocations</span><span class="p">(</span><span class="n">alias_paths</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">to_text</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this produces a nicely formatted table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sourcefile  sourceline  class_path  method_id  memsize  class
</span><span class='line'>----------  ----------  ----------  ---------  -------  ------
</span><span class='line'>post.rb             10  String      upcase           0  String
</span><span class='line'>post.rb             10  String      upcase           0  String
</span><span class='line'>post.rb             10  String      upcase           0  String
</span><span class='line'>post.rb              9  Array       map              0  Array
</span><span class='line'>post.rb              9  Post        tags             0  Array
</span><span class='line'>post.rb              9  Post        tags             0  String
</span><span class='line'>post.rb              9  Post        tags             0  String
</span><span class='line'>post.rb              9  Post        tags             0  String
</span><span class='line'>post.rb             17  Class       new              0  Post
</span><span class='line'>post.rb             17                               0  String
</span></code></pre></td></tr></table></div></figure>


<p>Sam gave a wonderful presentation that looks into more details of the allocation_stats gem.
(This section is quoted from <a href="http://www.sitepoint.com/look-ruby-2-1/">http://www.sitepoint.com/look-ruby-2-1/</a>)</p>

<h5>9. Strings</h5>

<p>String is important to every programming language, Ruby is no excuse, you cannot avoid them in almost every real world program. With the release of Ruby 2.1, there are a few of changes you can use to your advantage.</p>

<p><strong>String Frozen</strong>
In Ruby, every time you declare a string, a new object is created then the string data copied into it. In other word, if you have a string literal in you method, every time you call the method, a new string object will be created, it may lead to performance issue in real world application.</p>

<p>Of course you can avoid this problem with Symbols because every Symbol instance in Ruby is single instance, you always refer to the same instance.</p>

<p>Unfortunately Symbols are not sting, you cannot split it, index it or search through it. You have to convert the Symbol to a string before performing these actions. You can use symbols when referring to &ldquo;the thing called,&rdquo; but manipulating them in any way is out of the question. What&rsquo;s needed is something in between a symbol and a mutable string. This is what frozen strings are for.</p>

<p>In the past, you were able to create frozen strings using &ldquo;some string&#8221;f. Notice the f suffix. This syntax has been removed (or deprecated), and the more standard &#8220;some string&rdquo;.freeze method syntax optimised. Frozen strings are created once, and are immutable just like symbols, but all of the traditional string methods (barring those that modify the string) are available. While frozen strings are not new, the optimisation of the .freeze method is new.</p>

<p><strong>String Scrubbing</strong></p>

<p><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>Scrubbing strings is important when working with multibyte encoded strings (which Ruby defaults to now). &ldquo;Scrubbing&rdquo; a string is removing invalid byte sequences from a string while keeping all valid byte sequences intact. This is important when sending strings downstream to &ldquo;dumber&rdquo; clients if these clients can conceivably display incorrect data as garbage.</p>

<p>The String#scrub method scrubs all invalid character sequences from a string and returns the new string. It can be called with no arguments like &ldquo;string&rdquo;.scrub, which replaces all invalid sequences with an empty string (&ldquo;deleting&rdquo; them). You can also call it with a simple string replacement, such as &ldquo;abc\u3042\x81&rdquo;.scrub(&ldquo;X&rdquo;) which replaced the invalid sequence \x81 with X, producing the string &ldquo;abc\u3042X&rdquo;. You can also use a block, and the docs for the method give a very useful method for debugging: a block that replaces all invalid sequences with their hex equivalent so you can see the invalid sequences without delving into the Ruby debugger or IRB: &ldquo;abc\u3042\xE3\x80&rdquo;.scrub{|bytes| &lsquo;&lt;&rsquo;+bytes.unpack(&lsquo;H*&rsquo;)[0]+&lsquo;>&rsquo; }. This will produce the string &ldquo;abc\u3042&rdquo;.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://www.sitepoint.com/look-ruby-2-1/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>http://ruby.about.com/od/Whats-New-in-Ruby-210/fl/Whats-new-in-Ruby-210-Strings.htm<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
